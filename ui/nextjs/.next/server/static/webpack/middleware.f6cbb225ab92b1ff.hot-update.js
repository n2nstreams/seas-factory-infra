"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("middleware",{

/***/ "(middleware)/./src/lib/correlation-id.ts":
/*!***********************************!*\
  !*** ./src/lib/correlation-id.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCorrelationId: () => (/* binding */ addCorrelationId),\n/* harmony export */   correlationAwareFetch: () => (/* binding */ correlationAwareFetch),\n/* harmony export */   correlationManager: () => (/* binding */ correlationManager),\n/* harmony export */   createCorrelationAwareFetch: () => (/* binding */ createCorrelationAwareFetch),\n/* harmony export */   createCorrelationContext: () => (/* binding */ createCorrelationContext),\n/* harmony export */   createFetchOptionsWithCorrelation: () => (/* binding */ createFetchOptionsWithCorrelation),\n/* harmony export */   createHeadersWithCorrelation: () => (/* binding */ createHeadersWithCorrelation),\n/* harmony export */   extractCorrelationId: () => (/* binding */ extractCorrelationId),\n/* harmony export */   generateCorrelationId: () => (/* binding */ generateCorrelationId),\n/* harmony export */   generateSpanId: () => (/* binding */ generateSpanId),\n/* harmony export */   generateTraceId: () => (/* binding */ generateTraceId),\n/* harmony export */   logWithCorrelation: () => (/* binding */ logWithCorrelation),\n/* harmony export */   withCorrelationContext: () => (/* binding */ withCorrelationContext)\n/* harmony export */ });\n// Correlation ID service for request tracing and observability\n// Configuration\nconst CORRELATION_ID_HEADER = process.env.NEXT_PUBLIC_CORRELATION_ID_HEADER || 'X-Correlation-ID';\nconst CORRELATION_ID_LENGTH = parseInt(process.env.NEXT_PUBLIC_CORRELATION_ID_LENGTH || '16', 10);\n// Generate a unique correlation ID\nfunction generateCorrelationId() {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for(let i = 0; i < CORRELATION_ID_LENGTH; i++){\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n}\n// Generate a trace ID (longer, more unique identifier)\nfunction generateTraceId() {\n    return generateCorrelationId() + generateCorrelationId();\n}\n// Generate a span ID (shorter identifier for individual operations)\nfunction generateSpanId() {\n    return generateCorrelationId().substring(0, 8);\n}\n// Create a new correlation context\nfunction createCorrelationContext(parentContext, metadata = {}) {\n    const now = new Date().toISOString();\n    return {\n        id: parentContext?.id || generateCorrelationId(),\n        parentId: parentContext?.parentId,\n        traceId: parentContext?.traceId || generateTraceId(),\n        spanId: generateSpanId(),\n        userId: parentContext?.userId,\n        sessionId: parentContext?.sessionId,\n        requestId: parentContext?.requestId || generateCorrelationId(),\n        timestamp: now,\n        metadata: {\n            ...parentContext?.metadata,\n            ...metadata,\n            created_at: now\n        }\n    };\n}\n// Extract correlation ID from headers\nfunction extractCorrelationId(headers) {\n    if (headers instanceof Headers) {\n        return headers.get(CORRELATION_ID_HEADER) || null;\n    }\n    return headers[CORRELATION_ID_HEADER] || null;\n}\n// Add correlation ID to headers\nfunction addCorrelationId(headers, correlationId) {\n    if (headers instanceof Headers) {\n        headers.set(CORRELATION_ID_HEADER, correlationId);\n    } else {\n        headers[CORRELATION_ID_HEADER] = correlationId;\n    }\n}\n// Create headers with correlation ID\nfunction createHeadersWithCorrelation(correlationId, additionalHeaders = {}) {\n    return {\n        [CORRELATION_ID_HEADER]: correlationId,\n        'Content-Type': 'application/json',\n        ...additionalHeaders\n    };\n}\n// Create fetch options with correlation ID\nfunction createFetchOptionsWithCorrelation(correlationId, options = {}) {\n    return {\n        ...options,\n        headers: {\n            ...createHeadersWithCorrelation(correlationId),\n            ...options.headers\n        }\n    };\n}\n// Correlation context manager for React components\nclass CorrelationContextManager {\n    // Set the current correlation context\n    setContext(context) {\n        this.currentContext = context;\n        this.notifyListeners();\n    }\n    // Get the current correlation context\n    getContext() {\n        return this.currentContext;\n    }\n    // Create a child context\n    createChildContext(metadata = {}) {\n        if (!this.currentContext) {\n            return createCorrelationContext({}, metadata);\n        }\n        return createCorrelationContext(this.currentContext, {\n            ...metadata,\n            parent_correlation_id: this.currentContext.id\n        });\n    }\n    // Update the current context with additional metadata\n    updateContext(metadata) {\n        if (this.currentContext) {\n            this.currentContext.metadata = {\n                ...this.currentContext.metadata,\n                ...metadata,\n                updated_at: new Date().toISOString()\n            };\n            this.notifyListeners();\n        }\n    }\n    // Clear the current context\n    clearContext() {\n        this.currentContext = null;\n        this.notifyListeners();\n    }\n    // Subscribe to context changes\n    subscribe(listener) {\n        this.listeners.add(listener);\n        return ()=>{\n            this.listeners.delete(listener);\n        };\n    }\n    // Notify all listeners of context changes\n    notifyListeners() {\n        this.listeners.forEach((listener)=>{\n            try {\n                listener(this.currentContext);\n            } catch (error) {\n                console.error('Error in correlation context listener:', error);\n            }\n        });\n    }\n    // Extract correlation ID from headers\n    extractFromHeaders(headers) {\n        const correlationId = headers['x-correlation-id'] || headers['X-Correlation-ID'];\n        if (!correlationId) return null;\n        const context = this.getContext(correlationId);\n        if (context) {\n            this.setCurrentContext(context);\n            return context;\n        }\n        // Create new context from headers, preserving the incoming correlation ID\n        const newContext = {\n            correlationId: correlationId,\n            requestId: headers['x-request-id'] || headers['X-Request-ID'] || uuidv4(),\n            parentId: headers['x-parent-id'] || headers['X-Parent-ID'] || undefined,\n            spanId: headers['x-span-id'] || headers['X-Span-ID'] || uuidv4(),\n            traceId: headers['x-trace-id'] || headers['X-Trace-ID'] || correlationId,\n            userId: headers['x-user-id'] || headers['X-User-ID'] || undefined,\n            tenantId: headers['x-tenant-id'] || headers['X-Tenant-ID'] || undefined,\n            sessionId: headers['x-session-id'] || headers['X-Session-ID'] || undefined,\n            timestamp: parseInt(headers['x-timestamp'] || headers['X-Timestamp'] || Date.now().toString()),\n            metadata: {\n                service: headers['x-service'] || headers['X-Service'] || 'unknown',\n                version: process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0',\n                environment: \"development\" || 0\n            }\n        };\n        this.setCurrentContext(newContext);\n        return newContext;\n    }\n    constructor(){\n        this.currentContext = null;\n        this.listeners = new Set();\n    }\n}\n// Export singleton instance\nconst correlationManager = new CorrelationContextManager();\n// Utility function to log with correlation context\nfunction logWithCorrelation(level, message, data) {\n    const context = correlationManager.getContext();\n    const logData = {\n        message,\n        data,\n        correlation_id: context?.id,\n        trace_id: context?.traceId,\n        span_id: context?.spanId,\n        timestamp: new Date().toISOString()\n    };\n    switch(level){\n        case 'info':\n            console.info('📊', logData);\n            break;\n        case 'warn':\n            console.warn('⚠️', logData);\n            break;\n        case 'error':\n            console.error('❌', logData);\n            break;\n        case 'debug':\n            console.debug('🔍', logData);\n            break;\n    }\n}\n// Utility function to create a correlation-aware fetch wrapper\nfunction createCorrelationAwareFetch() {\n    return async (input, init)=>{\n        const context = correlationManager.getContext();\n        if (context) {\n            const options = createFetchOptionsWithCorrelation(context.id, init);\n            // Log the request\n            logWithCorrelation('info', 'API Request', {\n                url: typeof input === 'string' ? input : input.toString(),\n                method: options.method || 'GET',\n                correlation_id: context.id\n            });\n            try {\n                const response = await fetch(input, options);\n                // Log the response\n                logWithCorrelation('info', 'API Response', {\n                    url: typeof input === 'string' ? input : input.toString(),\n                    status: response.status,\n                    statusText: response.statusText,\n                    correlation_id: context.id\n                });\n                return response;\n            } catch (error) {\n                // Log the error\n                logWithCorrelation('error', 'API Request Failed', {\n                    url: typeof input === 'string' ? input : input.toString(),\n                    error: error instanceof Error ? error.message : String(error),\n                    correlation_id: context.id\n                });\n                throw error;\n            }\n        }\n        // Fallback to regular fetch if no correlation context\n        return fetch(input, init);\n    };\n}\n// Export the correlation-aware fetch function\nconst correlationAwareFetch = createCorrelationAwareFetch();\n// Utility function to wrap async operations with correlation context\nfunction withCorrelationContext(operation, metadata = {}) {\n    const childContext = correlationManager.createChildContext(metadata);\n    correlationManager.setContext(childContext);\n    return operation().finally(()=>{\n        // Restore parent context if it exists\n        if (childContext.parentId) {\n            const parentContext = correlationManager.getContext();\n            if (parentContext && parentContext.id === childContext.parentId) {\n                correlationManager.setContext(parentContext);\n            }\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./src/lib/correlation-id.ts\n");

/***/ }),

/***/ "(middleware)/./src/middleware.ts":
/*!***************************!*\
  !*** ./src/middleware.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   middleware: () => (/* binding */ middleware)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(middleware)/./node_modules/next/dist/esm/api/server.js\");\n/* harmony import */ var _lib_correlation_id__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/correlation-id */ \"(middleware)/./src/lib/correlation-id.ts\");\n\n\nfunction middleware(request) {\n    // Extract correlation ID from incoming request headers\n    const headers = Object.fromEntries(request.headers.entries());\n    const correlationContext = _lib_correlation_id__WEBPACK_IMPORTED_MODULE_1__.correlationIDManager.extractFromHeaders(headers);\n    // If no correlation context exists, create one\n    if (!correlationContext) {\n        _lib_correlation_id__WEBPACK_IMPORTED_MODULE_1__.correlationIDManager.generateContext(undefined, undefined, undefined, undefined, {\n            operation: 'http_request',\n            path: request.nextUrl.pathname,\n            method: request.method,\n            userAgent: headers['user-agent'],\n            referer: headers['referer']\n        });\n    }\n    // Clone the request headers to add correlation IDs\n    const requestHeaders = new Headers(request.headers);\n    const correlationHeaders = _lib_correlation_id__WEBPACK_IMPORTED_MODULE_1__.correlationIDManager.getHeaders();\n    // Add correlation headers to the request\n    Object.entries(correlationHeaders).forEach(([key, value])=>{\n        if (value) {\n            requestHeaders.set(key, value);\n        }\n    });\n    // Create a new request with correlation headers\n    const enhancedRequest = new next_server__WEBPACK_IMPORTED_MODULE_0__.NextRequest(request, {\n        headers: requestHeaders\n    });\n    // Process the request\n    const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next({\n        request: enhancedRequest\n    });\n    // Add correlation headers to the response\n    Object.entries(correlationHeaders).forEach(([key, value])=>{\n        if (value) {\n            response.headers.set(key, value);\n        }\n    });\n    // Add additional response headers for tracking\n    response.headers.set('X-Request-ID', _lib_correlation_id__WEBPACK_IMPORTED_MODULE_1__.correlationIDManager.getCurrentContext()?.requestId || '');\n    response.headers.set('X-Span-ID', _lib_correlation_id__WEBPACK_IMPORTED_MODULE_1__.correlationIDManager.getCurrentContext()?.spanId || '');\n    response.headers.set('X-Trace-ID', _lib_correlation_id__WEBPACK_IMPORTED_MODULE_1__.correlationIDManager.getCurrentContext()?.traceId || '');\n    // Log the request with correlation context\n    const currentContext = _lib_correlation_id__WEBPACK_IMPORTED_MODULE_1__.correlationIDManager.getCurrentContext();\n    if (currentContext) {\n        // Only log for non-asset requests to avoid noise\n        if (!request.nextUrl.pathname.startsWith('/_next/') && !request.nextUrl.pathname.startsWith('/favicon.ico') && !request.nextUrl.pathname.startsWith('/api/health')) {\n            _lib_correlation_id__WEBPACK_IMPORTED_MODULE_1__.correlationIDManager.logContext(currentContext, 'info');\n        }\n    }\n    return response;\n}\nconst config = {\n    matcher: [\n        /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */ '/((?!api|_next/static|_next/image|favicon.ico).*)'\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vc3JjL21pZGRsZXdhcmUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1RDtBQUNJO0FBRXBELFNBQVNHLFdBQVdDLE9BQW9CO0lBQzdDLHVEQUF1RDtJQUN2RCxNQUFNQyxVQUFVQyxPQUFPQyxXQUFXLENBQUNILFFBQVFDLE9BQU8sQ0FBQ0csT0FBTztJQUMxRCxNQUFNQyxxQkFBcUJQLHdGQUF1QyxDQUFDRztJQUVuRSwrQ0FBK0M7SUFDL0MsSUFBSSxDQUFDSSxvQkFBb0I7UUFDdkJQLHFGQUFvQyxDQUNsQ1UsV0FDQUEsV0FDQUEsV0FDQUEsV0FDQTtZQUNFQyxXQUFXO1lBQ1hDLE1BQU1WLFFBQVFXLE9BQU8sQ0FBQ0MsUUFBUTtZQUM5QkMsUUFBUWIsUUFBUWEsTUFBTTtZQUN0QkMsV0FBV2IsT0FBTyxDQUFDLGFBQWE7WUFDaENjLFNBQVNkLE9BQU8sQ0FBQyxVQUFVO1FBQzdCO0lBRUo7SUFFQSxtREFBbUQ7SUFDbkQsTUFBTWUsaUJBQWlCLElBQUlDLFFBQVFqQixRQUFRQyxPQUFPO0lBQ2xELE1BQU1pQixxQkFBcUJwQixnRkFBK0I7SUFFMUQseUNBQXlDO0lBQ3pDSSxPQUFPRSxPQUFPLENBQUNjLG9CQUFvQkUsT0FBTyxDQUFDLENBQUMsQ0FBQ0MsS0FBS0MsTUFBTTtRQUN0RCxJQUFJQSxPQUFPO1lBQ1ROLGVBQWVPLEdBQUcsQ0FBQ0YsS0FBS0M7UUFDMUI7SUFDRjtJQUVBLGdEQUFnRDtJQUNoRCxNQUFNRSxrQkFBa0IsSUFBSTVCLG9EQUFXQSxDQUFDSSxTQUFTO1FBQy9DQyxTQUFTZTtJQUNYO0lBRUEsc0JBQXNCO0lBQ3RCLE1BQU1TLFdBQVc1QixxREFBWUEsQ0FBQzZCLElBQUksQ0FBQztRQUNqQzFCLFNBQVN3QjtJQUNYO0lBRUEsMENBQTBDO0lBQzFDdEIsT0FBT0UsT0FBTyxDQUFDYyxvQkFBb0JFLE9BQU8sQ0FBQyxDQUFDLENBQUNDLEtBQUtDLE1BQU07UUFDdEQsSUFBSUEsT0FBTztZQUNURyxTQUFTeEIsT0FBTyxDQUFDc0IsR0FBRyxDQUFDRixLQUFLQztRQUM1QjtJQUNGO0lBRUEsK0NBQStDO0lBQy9DRyxTQUFTeEIsT0FBTyxDQUFDc0IsR0FBRyxDQUFDLGdCQUFnQnpCLHVGQUFzQyxJQUFJOEIsYUFBYTtJQUM1RkgsU0FBU3hCLE9BQU8sQ0FBQ3NCLEdBQUcsQ0FBQyxhQUFhekIsdUZBQXNDLElBQUkrQixVQUFVO0lBQ3RGSixTQUFTeEIsT0FBTyxDQUFDc0IsR0FBRyxDQUFDLGNBQWN6Qix1RkFBc0MsSUFBSWdDLFdBQVc7SUFFeEYsMkNBQTJDO0lBQzNDLE1BQU1DLGlCQUFpQmpDLHVGQUFzQztJQUM3RCxJQUFJaUMsZ0JBQWdCO1FBQ2xCLGlEQUFpRDtRQUNqRCxJQUFJLENBQUMvQixRQUFRVyxPQUFPLENBQUNDLFFBQVEsQ0FBQ29CLFVBQVUsQ0FBQyxjQUNyQyxDQUFDaEMsUUFBUVcsT0FBTyxDQUFDQyxRQUFRLENBQUNvQixVQUFVLENBQUMsbUJBQ3JDLENBQUNoQyxRQUFRVyxPQUFPLENBQUNDLFFBQVEsQ0FBQ29CLFVBQVUsQ0FBQyxnQkFBZ0I7WUFDdkRsQyxnRkFBK0IsQ0FBQ2lDLGdCQUFnQjtRQUNsRDtJQUNGO0lBRUEsT0FBT047QUFDVDtBQUVPLE1BQU1TLFNBQVM7SUFDcEJDLFNBQVM7UUFDUDs7Ozs7O0tBTUMsR0FDRDtLQUNEO0FBQ0gsRUFBQyIsInNvdXJjZXMiOlsiL1VzZXJzL21hY21pbmkvRG9jdW1lbnRzL1Byb2plY3RzL1NhYVMgRmFjdG9yeS91aS9uZXh0anMvc3JjL21pZGRsZXdhcmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJ1xuaW1wb3J0IHsgY29ycmVsYXRpb25JRE1hbmFnZXIgfSBmcm9tICcuL2xpYi9jb3JyZWxhdGlvbi1pZCdcblxuZXhwb3J0IGZ1bmN0aW9uIG1pZGRsZXdhcmUocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgLy8gRXh0cmFjdCBjb3JyZWxhdGlvbiBJRCBmcm9tIGluY29taW5nIHJlcXVlc3QgaGVhZGVyc1xuICBjb25zdCBoZWFkZXJzID0gT2JqZWN0LmZyb21FbnRyaWVzKHJlcXVlc3QuaGVhZGVycy5lbnRyaWVzKCkpXG4gIGNvbnN0IGNvcnJlbGF0aW9uQ29udGV4dCA9IGNvcnJlbGF0aW9uSURNYW5hZ2VyLmV4dHJhY3RGcm9tSGVhZGVycyhoZWFkZXJzKVxuICBcbiAgLy8gSWYgbm8gY29ycmVsYXRpb24gY29udGV4dCBleGlzdHMsIGNyZWF0ZSBvbmVcbiAgaWYgKCFjb3JyZWxhdGlvbkNvbnRleHQpIHtcbiAgICBjb3JyZWxhdGlvbklETWFuYWdlci5nZW5lcmF0ZUNvbnRleHQoXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB7IFxuICAgICAgICBvcGVyYXRpb246ICdodHRwX3JlcXVlc3QnLCBcbiAgICAgICAgcGF0aDogcmVxdWVzdC5uZXh0VXJsLnBhdGhuYW1lLFxuICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICB1c2VyQWdlbnQ6IGhlYWRlcnNbJ3VzZXItYWdlbnQnXSxcbiAgICAgICAgcmVmZXJlcjogaGVhZGVyc1sncmVmZXJlciddXG4gICAgICB9XG4gICAgKVxuICB9XG5cbiAgLy8gQ2xvbmUgdGhlIHJlcXVlc3QgaGVhZGVycyB0byBhZGQgY29ycmVsYXRpb24gSURzXG4gIGNvbnN0IHJlcXVlc3RIZWFkZXJzID0gbmV3IEhlYWRlcnMocmVxdWVzdC5oZWFkZXJzKVxuICBjb25zdCBjb3JyZWxhdGlvbkhlYWRlcnMgPSBjb3JyZWxhdGlvbklETWFuYWdlci5nZXRIZWFkZXJzKClcbiAgXG4gIC8vIEFkZCBjb3JyZWxhdGlvbiBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gIE9iamVjdC5lbnRyaWVzKGNvcnJlbGF0aW9uSGVhZGVycykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICByZXF1ZXN0SGVhZGVycy5zZXQoa2V5LCB2YWx1ZSlcbiAgICB9XG4gIH0pXG5cbiAgLy8gQ3JlYXRlIGEgbmV3IHJlcXVlc3Qgd2l0aCBjb3JyZWxhdGlvbiBoZWFkZXJzXG4gIGNvbnN0IGVuaGFuY2VkUmVxdWVzdCA9IG5ldyBOZXh0UmVxdWVzdChyZXF1ZXN0LCB7XG4gICAgaGVhZGVyczogcmVxdWVzdEhlYWRlcnNcbiAgfSlcblxuICAvLyBQcm9jZXNzIHRoZSByZXF1ZXN0XG4gIGNvbnN0IHJlc3BvbnNlID0gTmV4dFJlc3BvbnNlLm5leHQoe1xuICAgIHJlcXVlc3Q6IGVuaGFuY2VkUmVxdWVzdFxuICB9KVxuXG4gIC8vIEFkZCBjb3JyZWxhdGlvbiBoZWFkZXJzIHRvIHRoZSByZXNwb25zZVxuICBPYmplY3QuZW50cmllcyhjb3JyZWxhdGlvbkhlYWRlcnMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgcmVzcG9uc2UuaGVhZGVycy5zZXQoa2V5LCB2YWx1ZSlcbiAgICB9XG4gIH0pXG5cbiAgLy8gQWRkIGFkZGl0aW9uYWwgcmVzcG9uc2UgaGVhZGVycyBmb3IgdHJhY2tpbmdcbiAgcmVzcG9uc2UuaGVhZGVycy5zZXQoJ1gtUmVxdWVzdC1JRCcsIGNvcnJlbGF0aW9uSURNYW5hZ2VyLmdldEN1cnJlbnRDb250ZXh0KCk/LnJlcXVlc3RJZCB8fCAnJylcbiAgcmVzcG9uc2UuaGVhZGVycy5zZXQoJ1gtU3Bhbi1JRCcsIGNvcnJlbGF0aW9uSURNYW5hZ2VyLmdldEN1cnJlbnRDb250ZXh0KCk/LnNwYW5JZCB8fCAnJylcbiAgcmVzcG9uc2UuaGVhZGVycy5zZXQoJ1gtVHJhY2UtSUQnLCBjb3JyZWxhdGlvbklETWFuYWdlci5nZXRDdXJyZW50Q29udGV4dCgpPy50cmFjZUlkIHx8ICcnKVxuXG4gIC8vIExvZyB0aGUgcmVxdWVzdCB3aXRoIGNvcnJlbGF0aW9uIGNvbnRleHRcbiAgY29uc3QgY3VycmVudENvbnRleHQgPSBjb3JyZWxhdGlvbklETWFuYWdlci5nZXRDdXJyZW50Q29udGV4dCgpXG4gIGlmIChjdXJyZW50Q29udGV4dCkge1xuICAgIC8vIE9ubHkgbG9nIGZvciBub24tYXNzZXQgcmVxdWVzdHMgdG8gYXZvaWQgbm9pc2VcbiAgICBpZiAoIXJlcXVlc3QubmV4dFVybC5wYXRobmFtZS5zdGFydHNXaXRoKCcvX25leHQvJykgJiYgXG4gICAgICAgICFyZXF1ZXN0Lm5leHRVcmwucGF0aG5hbWUuc3RhcnRzV2l0aCgnL2Zhdmljb24uaWNvJykgJiZcbiAgICAgICAgIXJlcXVlc3QubmV4dFVybC5wYXRobmFtZS5zdGFydHNXaXRoKCcvYXBpL2hlYWx0aCcpKSB7XG4gICAgICBjb3JyZWxhdGlvbklETWFuYWdlci5sb2dDb250ZXh0KGN1cnJlbnRDb250ZXh0LCAnaW5mbycpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3BvbnNlXG59XG5cbmV4cG9ydCBjb25zdCBjb25maWcgPSB7XG4gIG1hdGNoZXI6IFtcbiAgICAvKlxuICAgICAqIE1hdGNoIGFsbCByZXF1ZXN0IHBhdGhzIGV4Y2VwdCBmb3IgdGhlIG9uZXMgc3RhcnRpbmcgd2l0aDpcbiAgICAgKiAtIGFwaSAoQVBJIHJvdXRlcylcbiAgICAgKiAtIF9uZXh0L3N0YXRpYyAoc3RhdGljIGZpbGVzKVxuICAgICAqIC0gX25leHQvaW1hZ2UgKGltYWdlIG9wdGltaXphdGlvbiBmaWxlcylcbiAgICAgKiAtIGZhdmljb24uaWNvIChmYXZpY29uIGZpbGUpXG4gICAgICovXG4gICAgJy8oKD8hYXBpfF9uZXh0L3N0YXRpY3xfbmV4dC9pbWFnZXxmYXZpY29uLmljbykuKiknLFxuICBdLFxufVxuIl0sIm5hbWVzIjpbIk5leHRSZXF1ZXN0IiwiTmV4dFJlc3BvbnNlIiwiY29ycmVsYXRpb25JRE1hbmFnZXIiLCJtaWRkbGV3YXJlIiwicmVxdWVzdCIsImhlYWRlcnMiLCJPYmplY3QiLCJmcm9tRW50cmllcyIsImVudHJpZXMiLCJjb3JyZWxhdGlvbkNvbnRleHQiLCJleHRyYWN0RnJvbUhlYWRlcnMiLCJnZW5lcmF0ZUNvbnRleHQiLCJ1bmRlZmluZWQiLCJvcGVyYXRpb24iLCJwYXRoIiwibmV4dFVybCIsInBhdGhuYW1lIiwibWV0aG9kIiwidXNlckFnZW50IiwicmVmZXJlciIsInJlcXVlc3RIZWFkZXJzIiwiSGVhZGVycyIsImNvcnJlbGF0aW9uSGVhZGVycyIsImdldEhlYWRlcnMiLCJmb3JFYWNoIiwia2V5IiwidmFsdWUiLCJzZXQiLCJlbmhhbmNlZFJlcXVlc3QiLCJyZXNwb25zZSIsIm5leHQiLCJnZXRDdXJyZW50Q29udGV4dCIsInJlcXVlc3RJZCIsInNwYW5JZCIsInRyYWNlSWQiLCJjdXJyZW50Q29udGV4dCIsInN0YXJ0c1dpdGgiLCJsb2dDb250ZXh0IiwiY29uZmlnIiwibWF0Y2hlciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./src/middleware.ts\n");

/***/ })

});