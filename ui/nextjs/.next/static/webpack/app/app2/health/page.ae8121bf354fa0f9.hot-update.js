"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/app2/health/page",{

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/native.js":
/*!******************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/native.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({ randomUUID });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvbmF0aXZlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLGlFQUFlLEVBQUUsWUFBWSxFQUFDIiwic291cmNlcyI6WyIvVXNlcnMvbWFjbWluaS9Eb2N1bWVudHMvUHJvamVjdHMvU2FhUyBGYWN0b3J5L3VpL25leHRqcy9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL25hdGl2ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByYW5kb21VVUlEID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLnJhbmRvbVVVSUQgJiYgY3J5cHRvLnJhbmRvbVVVSUQuYmluZChjcnlwdG8pO1xuZXhwb3J0IGRlZmF1bHQgeyByYW5kb21VVUlEIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/native.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/regex.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/regex.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcmVnZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWMsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsR0FBRyw4RUFBOEUsRUFBQyIsInNvdXJjZXMiOlsiL1VzZXJzL21hY21pbmkvRG9jdW1lbnRzL1Byb2plY3RzL1NhYVMgRmFjdG9yeS91aS9uZXh0anMvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9yZWdleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAvXig/OlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLThdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9fDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMHxmZmZmZmZmZi1mZmZmLWZmZmYtZmZmZi1mZmZmZmZmZmZmZmYpJC9pO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/regex.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/rng.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/rng.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rng)\n/* harmony export */ });\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nfunction rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ2U7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbWFjbWluaS9Eb2N1bWVudHMvUHJvamVjdHMvU2FhUyBGYWN0b3J5L3VpL25leHRqcy9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3JuZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgZ2V0UmFuZG9tVmFsdWVzO1xuY29uc3Qgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBybmcoKSB7XG4gICAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjcnlwdG8gPT09ICd1bmRlZmluZWQnIHx8ICFjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyeXB0by5nZXRSYW5kb21WYWx1ZXMoKSBub3Qgc3VwcG9ydGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkI2dldHJhbmRvbXZhbHVlcy1ub3Qtc3VwcG9ydGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0UmFuZG9tVmFsdWVzID0gY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0byk7XG4gICAgfVxuICAgIHJldHVybiBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/rng.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/stringify.js":
/*!*********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/stringify.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   unsafeStringify: () => (/* binding */ unsafeStringify)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/validate.js\");\n\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nfunction unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc3RyaW5naWZ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxQztBQUNyQztBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHdEQUFRO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsU0FBUyxFQUFDIiwic291cmNlcyI6WyIvVXNlcnMvbWFjbWluaS9Eb2N1bWVudHMvUHJvamVjdHMvU2FhUyBGYWN0b3J5L3VpL25leHRqcy9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3N0cmluZ2lmeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG5jb25zdCBieXRlVG9IZXggPSBbXTtcbmZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc2xpY2UoMSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgICByZXR1cm4gKGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMF1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDJdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgM11dICtcbiAgICAgICAgJy0nICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA0XV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDVdXSArXG4gICAgICAgICctJyArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNl1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA3XV0gK1xuICAgICAgICAnLScgK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDhdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOV1dICtcbiAgICAgICAgJy0nICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMF1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMV1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMl1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxM11dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNF1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNV1dKS50b0xvd2VyQ2FzZSgpO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICAgIGNvbnN0IHV1aWQgPSB1bnNhZmVTdHJpbmdpZnkoYXJyLCBvZmZzZXQpO1xuICAgIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmdpZmllZCBVVUlEIGlzIGludmFsaWQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHV1aWQ7XG59XG5leHBvcnQgZGVmYXVsdCBzdHJpbmdpZnk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/stringify.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v4.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./native.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/native.js\");\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rng.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/stringify.js\");\n\n\n\nfunction v4(options, buf, offset) {\n    if (_native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID && !buf && !options) {\n        return _native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? (0,_rng_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(rnds);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpQztBQUNOO0FBQ3NCO0FBQ2pEO0FBQ0EsUUFBUSxrREFBTTtBQUNkLGVBQWUsa0RBQU07QUFDckI7QUFDQTtBQUNBLHNEQUFzRCxtREFBRztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELE9BQU8sR0FBRyxhQUFhO0FBQzNFO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDhEQUFlO0FBQzFCO0FBQ0EsaUVBQWUsRUFBRSxFQUFDIiwic291cmNlcyI6WyIvVXNlcnMvbWFjbWluaS9Eb2N1bWVudHMvUHJvamVjdHMvU2FhUyBGYWN0b3J5L3VpL25leHRqcy9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3Y0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBuYXRpdmUgZnJvbSAnLi9uYXRpdmUuanMnO1xuaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICAgIGlmIChuYXRpdmUucmFuZG9tVVVJRCAmJiAhYnVmICYmICFvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmUucmFuZG9tVVVJRCgpO1xuICAgIH1cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBjb25zdCBybmRzID0gb3B0aW9ucy5yYW5kb20gPz8gb3B0aW9ucy5ybmc/LigpID8/IHJuZygpO1xuICAgIGlmIChybmRzLmxlbmd0aCA8IDE2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmFuZG9tIGJ5dGVzIGxlbmd0aCBtdXN0IGJlID49IDE2Jyk7XG4gICAgfVxuICAgIHJuZHNbNl0gPSAocm5kc1s2XSAmIDB4MGYpIHwgMHg0MDtcbiAgICBybmRzWzhdID0gKHJuZHNbOF0gJiAweDNmKSB8IDB4ODA7XG4gICAgaWYgKGJ1Zikge1xuICAgICAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcbiAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMTYgPiBidWYubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgVVVJRCBieXRlIHJhbmdlICR7b2Zmc2V0fToke29mZnNldCArIDE1fSBpcyBvdXQgb2YgYnVmZmVyIGJvdW5kc2ApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICByZXR1cm4gdW5zYWZlU3RyaW5naWZ5KHJuZHMpO1xufVxuZXhwb3J0IGRlZmF1bHQgdjQ7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/validate.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/validate.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/regex.js\");\n\nfunction validate(uuid) {\n    return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdmFsaWRhdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0I7QUFDL0I7QUFDQSx1Q0FBdUMsaURBQUs7QUFDNUM7QUFDQSxpRUFBZSxRQUFRLEVBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNtaW5pL0RvY3VtZW50cy9Qcm9qZWN0cy9TYWFTIEZhY3RvcnkvdWkvbmV4dGpzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdmFsaWRhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJFR0VYIGZyb20gJy4vcmVnZXguanMnO1xuZnVuY3Rpb24gdmFsaWRhdGUodXVpZCkge1xuICAgIHJldHVybiB0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycgJiYgUkVHRVgudGVzdCh1dWlkKTtcbn1cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/validate.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/providers/ObservabilityProvider.tsx":
/*!************************************************************!*\
  !*** ./src/components/providers/ObservabilityProvider.tsx ***!
  \************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObservabilityProvider: () => (/* binding */ ObservabilityProvider),\n/* harmony export */   useAlertThresholds: () => (/* binding */ useAlertThresholds),\n/* harmony export */   useHealthMonitoring: () => (/* binding */ useHealthMonitoring),\n/* harmony export */   useObservabilityCorrelationID: () => (/* binding */ useObservabilityCorrelationID),\n/* harmony export */   useSystemStatus: () => (/* binding */ useSystemStatus)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_health_monitoring_simple__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/health-monitoring-simple */ \"(app-pages-browser)/./src/lib/health-monitoring-simple.ts\");\n/* harmony import */ var _lib_correlation_id__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/correlation-id */ \"(app-pages-browser)/./src/lib/correlation-id.ts\");\n/* harmony import */ var _lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/alert-thresholds */ \"(app-pages-browser)/./src/lib/alert-thresholds.ts\");\n/* __next_internal_client_entry_do_not_use__ ObservabilityProvider,useHealthMonitoring,useObservabilityCorrelationID,useAlertThresholds,useSystemStatus auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$();\n\n\n\n\n// Create observability context\nconst ObservabilityContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n// Observability provider component\nfunction ObservabilityProvider(param) {\n    let { children } = param;\n    _s();\n    // Health monitoring state\n    const [currentHealth, setCurrentHealth] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [healthHistory, setHealthHistory] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [metricsHistory, setMetricsHistory] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [isMonitoring, setIsMonitoring] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Alert threshold state\n    const [alertThresholds, setAlertThresholds] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [alertHistory, setAlertHistory] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [isAlertMonitoring, setIsAlertMonitoring] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // System status state\n    const [systemStatus, setSystemStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        health: 'healthy',\n        alerts: {\n            warning: 0,\n            critical: 0,\n            resolved: 0\n        },\n        uptime: 0,\n        lastUpdate: new Date().toISOString()\n    });\n    // Initialize correlation ID context for this provider\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ObservabilityProvider.useEffect\": ()=>{\n            const context = _lib_correlation_id__WEBPACK_IMPORTED_MODULE_3__.correlationIDManager.generateContext(undefined, undefined, undefined, undefined, {\n                operation: 'observability_provider_init',\n                component: 'ObservabilityProvider'\n            });\n            // Log the initialization\n            _lib_correlation_id__WEBPACK_IMPORTED_MODULE_3__.correlationIDManager.logContext(context, 'info');\n        }\n    }[\"ObservabilityProvider.useEffect\"], []);\n    // Initialize health monitoring\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ObservabilityProvider.useEffect\": ()=>{\n            const initializeHealthMonitoring = {\n                \"ObservabilityProvider.useEffect.initializeHealthMonitoring\": async ()=>{\n                    try {\n                        // Run initial health check\n                        await runHealthCheck();\n                        // Start monitoring\n                        startMonitoring();\n                    } catch (error) {\n                        console.error('Failed to initialize health monitoring:', error);\n                    }\n                }\n            }[\"ObservabilityProvider.useEffect.initializeHealthMonitoring\"];\n            initializeHealthMonitoring();\n            return ({\n                \"ObservabilityProvider.useEffect\": ()=>{\n                    stopMonitoring();\n                }\n            })[\"ObservabilityProvider.useEffect\"];\n        }\n    }[\"ObservabilityProvider.useEffect\"], []);\n    // Initialize alert thresholds\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ObservabilityProvider.useEffect\": ()=>{\n            const thresholds = _lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__.alertThresholdManager.getAllThresholds();\n            setAlertThresholds(thresholds);\n            // Start alert monitoring\n            startAlertMonitoring();\n            return ({\n                \"ObservabilityProvider.useEffect\": ()=>{\n                    stopAlertMonitoring();\n                }\n            })[\"ObservabilityProvider.useEffect\"];\n        }\n    }[\"ObservabilityProvider.useEffect\"], []);\n    // Update system status periodically\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ObservabilityProvider.useEffect\": ()=>{\n            const updateSystemStatus = {\n                \"ObservabilityProvider.useEffect.updateSystemStatus\": ()=>{\n                    const health = (currentHealth === null || currentHealth === void 0 ? void 0 : currentHealth.status) || 'healthy';\n                    const alerts = {\n                        warning: alertHistory.filter({\n                            \"ObservabilityProvider.useEffect.updateSystemStatus\": (a)=>a.status === 'warning'\n                        }[\"ObservabilityProvider.useEffect.updateSystemStatus\"]).length,\n                        critical: alertHistory.filter({\n                            \"ObservabilityProvider.useEffect.updateSystemStatus\": (a)=>a.status === 'critical'\n                        }[\"ObservabilityProvider.useEffect.updateSystemStatus\"]).length,\n                        resolved: alertHistory.filter({\n                            \"ObservabilityProvider.useEffect.updateSystemStatus\": (a)=>a.status === 'resolved'\n                        }[\"ObservabilityProvider.useEffect.updateSystemStatus\"]).length\n                    };\n                    const uptime = currentHealth ? Date.now() - new Date(currentHealth.timestamp).getTime() : 0;\n                    setSystemStatus({\n                        health,\n                        alerts,\n                        uptime,\n                        lastUpdate: new Date().toISOString()\n                    });\n                }\n            }[\"ObservabilityProvider.useEffect.updateSystemStatus\"];\n            const interval = setInterval(updateSystemStatus, 10000) // Update every 10 seconds\n            ;\n            updateSystemStatus(); // Initial update\n            return ({\n                \"ObservabilityProvider.useEffect\": ()=>clearInterval(interval)\n            })[\"ObservabilityProvider.useEffect\"];\n        }\n    }[\"ObservabilityProvider.useEffect\"], [\n        currentHealth,\n        alertHistory\n    ]);\n    // Health monitoring functions\n    const startMonitoring = ()=>{\n        _lib_health_monitoring_simple__WEBPACK_IMPORTED_MODULE_2__.healthMonitoring.startMonitoring();\n        setIsMonitoring(true);\n    };\n    const stopMonitoring = ()=>{\n        _lib_health_monitoring_simple__WEBPACK_IMPORTED_MODULE_2__.healthMonitoring.stopMonitoring();\n        setIsMonitoring(false);\n    };\n    const runHealthCheck = async ()=>{\n        try {\n            const result = await _lib_health_monitoring_simple__WEBPACK_IMPORTED_MODULE_2__.healthMonitoring.runComprehensiveHealthCheck();\n            setCurrentHealth(result);\n            setHealthHistory(_lib_health_monitoring_simple__WEBPACK_IMPORTED_MODULE_2__.healthMonitoring.getHealthHistory());\n            setMetricsHistory(_lib_health_monitoring_simple__WEBPACK_IMPORTED_MODULE_2__.healthMonitoring.getMetricsHistory());\n        } catch (error) {\n            console.error('Health check failed:', error);\n        }\n    };\n    // Alert monitoring functions\n    const startAlertMonitoring = ()=>{\n        _lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__.alertThresholdManager.startMonitoring();\n        setIsAlertMonitoring(true);\n        // Set up periodic alert history updates\n        const updateAlertHistory = ()=>{\n            setAlertHistory(_lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__.alertThresholdManager.getAlertHistory());\n        };\n        const interval = setInterval(updateAlertHistory, 5000) // Update every 5 seconds\n        ;\n        updateAlertHistory() // Initial update\n        ;\n        window.alertHistoryInterval = interval;\n    };\n    const stopAlertMonitoring = ()=>{\n        _lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__.alertThresholdManager.stopMonitoring();\n        setIsAlertMonitoring(false);\n        // Clear interval\n        if (window.alertHistoryInterval) {\n            clearInterval(window.alertHistoryInterval);\n        }\n    };\n    const updateThreshold = (name, updates)=>{\n        const success = _lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__.alertThresholdManager.updateThreshold(name, updates);\n        if (success) {\n            setAlertThresholds(_lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__.alertThresholdManager.getAllThresholds());\n        }\n        return success;\n    };\n    const addThreshold = (threshold)=>{\n        _lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__.alertThresholdManager.addThreshold(threshold);\n        setAlertThresholds(_lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__.alertThresholdManager.getAllThresholds());\n    };\n    const removeThreshold = (name)=>{\n        const success = _lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__.alertThresholdManager.removeThreshold(name);\n        if (success) {\n            setAlertThresholds(_lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__.alertThresholdManager.getAllThresholds());\n        }\n        return success;\n    };\n    // Correlation ID functions\n    const generateCorrelationContext = (parentId, userId, tenantId, sessionId, metadata)=>{\n        _lib_correlation_id__WEBPACK_IMPORTED_MODULE_3__.correlationIDManager.generateContext(parentId, userId, tenantId, sessionId, metadata);\n    };\n    const getCorrelationHeaders = ()=>_lib_correlation_id__WEBPACK_IMPORTED_MODULE_3__.correlationIDManager.getHeaders();\n    // Get current correlation context\n    const currentContext = _lib_correlation_id__WEBPACK_IMPORTED_MODULE_3__.correlationIDManager.getCurrentContext();\n    // Context value\n    const contextValue = {\n        // Health monitoring\n        currentHealth,\n        healthHistory,\n        metricsHistory,\n        isMonitoring,\n        startMonitoring,\n        stopMonitoring,\n        runHealthCheck,\n        // Correlation ID tracking\n        correlationId: currentContext === null || currentContext === void 0 ? void 0 : currentContext.correlationId,\n        requestId: currentContext === null || currentContext === void 0 ? void 0 : currentContext.requestId,\n        spanId: currentContext === null || currentContext === void 0 ? void 0 : currentContext.spanId,\n        traceId: currentContext === null || currentContext === void 0 ? void 0 : currentContext.traceId,\n        generateCorrelationContext,\n        getCorrelationHeaders,\n        // Alert thresholds\n        alertThresholds,\n        alertHistory,\n        isAlertMonitoring,\n        startAlertMonitoring,\n        stopAlertMonitoring,\n        updateThreshold,\n        addThreshold,\n        removeThreshold,\n        // System status\n        systemStatus\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ObservabilityContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/macmini/Documents/Projects/SaaS Factory/ui/nextjs/src/components/providers/ObservabilityProvider.tsx\",\n        lineNumber: 273,\n        columnNumber: 5\n    }, this);\n}\n_s(ObservabilityProvider, \"JV24TfEYe5W8dFfUTNGuEEjxFAE=\");\n_c = ObservabilityProvider;\n// Hook to use observability context\nfunction useHealthMonitoring() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ObservabilityContext);\n    if (context === undefined) {\n        throw new Error('useHealthMonitoring must be used within an ObservabilityProvider');\n    }\n    return context;\n}\n_s1(useHealthMonitoring, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n// Hook to use correlation ID\nfunction useObservabilityCorrelationID() {\n    _s2();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ObservabilityContext);\n    if (context === undefined) {\n        throw new Error('useObservabilityCorrelationID must be used within an ObservabilityProvider');\n    }\n    return {\n        correlationId: context.correlationId,\n        requestId: context.requestId,\n        spanId: context.spanId,\n        traceId: context.traceId,\n        generateCorrelationContext: context.generateCorrelationContext,\n        getCorrelationHeaders: context.getCorrelationHeaders\n    };\n}\n_s2(useObservabilityCorrelationID, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n// Hook to use alert thresholds\nfunction useAlertThresholds() {\n    _s3();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ObservabilityContext);\n    if (context === undefined) {\n        throw new Error('useAlertThresholds must be used within an ObservabilityProvider');\n    }\n    return {\n        alertThresholds: context.alertThresholds,\n        alertHistory: context.alertHistory,\n        isAlertMonitoring: context.isAlertMonitoring,\n        startAlertMonitoring: context.startAlertMonitoring,\n        stopAlertMonitoring: context.stopAlertMonitoring,\n        updateThreshold: context.updateThreshold,\n        addThreshold: context.addThreshold,\n        removeThreshold: context.removeThreshold\n    };\n}\n_s3(useAlertThresholds, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n// Hook to use system status\nfunction useSystemStatus() {\n    _s4();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ObservabilityContext);\n    if (context === undefined) {\n        throw new Error('useSystemStatus must be used within an ObservabilityProvider');\n    }\n    return context.systemStatus;\n}\n_s4(useSystemStatus, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ObservabilityProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/providers/ObservabilityProvider.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/alert-thresholds.ts":
/*!*************************************!*\
  !*** ./src/lib/alert-thresholds.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlertThresholdManager: () => (/* binding */ AlertThresholdManager),\n/* harmony export */   alertThresholdManager: () => (/* binding */ alertThresholdManager)\n/* harmony export */ });\n/* harmony import */ var _correlation_id__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./correlation-id */ \"(app-pages-browser)/./src/lib/correlation-id.ts\");\n\n// Alert threshold manager\nclass AlertThresholdManager {\n    static getInstance() {\n        if (!AlertThresholdManager.instance) {\n            AlertThresholdManager.instance = new AlertThresholdManager();\n        }\n        return AlertThresholdManager.instance;\n    }\n    // Initialize default production thresholds\n    initializeDefaultThresholds() {\n        const defaultThresholds = [\n            // Performance thresholds\n            {\n                name: 'Error Rate Warning',\n                metric: 'error_rate',\n                warning: 2.0,\n                critical: 5.0,\n                enabled: true,\n                description: 'System error rate threshold',\n                category: 'performance',\n                severity: 'medium',\n                cooldown: 300,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        5.0,\n                        10.0,\n                        15.0\n                    ],\n                    contacts: [\n                        'dev-team',\n                        'oncall',\n                        'management'\n                    ]\n                }\n            },\n            {\n                name: 'Response Time Warning',\n                metric: 'response_time',\n                warning: 500,\n                critical: 2000,\n                enabled: true,\n                description: 'API response time threshold',\n                category: 'performance',\n                severity: 'medium',\n                cooldown: 300,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        2000,\n                        5000,\n                        10000\n                    ],\n                    contacts: [\n                        'dev-team',\n                        'oncall'\n                    ]\n                }\n            },\n            {\n                name: 'CPU Usage Warning',\n                metric: 'cpu_usage',\n                warning: 70.0,\n                critical: 85.0,\n                enabled: true,\n                description: 'CPU utilization threshold',\n                category: 'performance',\n                severity: 'high',\n                cooldown: 180,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        85.0,\n                        90.0,\n                        95.0\n                    ],\n                    contacts: [\n                        'ops-team',\n                        'oncall',\n                        'management'\n                    ]\n                }\n            },\n            {\n                name: 'Memory Usage Warning',\n                metric: 'memory_usage',\n                warning: 80.0,\n                critical: 90.0,\n                enabled: true,\n                description: 'Memory utilization threshold',\n                category: 'performance',\n                severity: 'high',\n                cooldown: 180,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        90.0,\n                        95.0,\n                        98.0\n                    ],\n                    contacts: [\n                        'ops-team',\n                        'oncall',\n                        'management'\n                    ]\n                }\n            },\n            {\n                name: 'Disk Usage Warning',\n                metric: 'disk_usage',\n                warning: 75.0,\n                critical: 85.0,\n                enabled: true,\n                description: 'Disk space utilization threshold',\n                category: 'performance',\n                severity: 'medium',\n                cooldown: 600,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        85.0,\n                        90.0,\n                        95.0\n                    ],\n                    contacts: [\n                        'ops-team',\n                        'oncall'\n                    ]\n                }\n            },\n            // Availability thresholds\n            {\n                name: 'Uptime Warning',\n                metric: 'uptime',\n                warning: 99.0,\n                critical: 95.0,\n                enabled: true,\n                description: 'System uptime threshold',\n                category: 'availability',\n                severity: 'critical',\n                cooldown: 60,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        95.0,\n                        90.0,\n                        80.0\n                    ],\n                    contacts: [\n                        'oncall',\n                        'management',\n                        'executive'\n                    ]\n                }\n            },\n            {\n                name: 'Health Check Failure',\n                metric: 'health_check_failure',\n                warning: 1,\n                critical: 3,\n                enabled: true,\n                description: 'Health check failure threshold',\n                category: 'availability',\n                severity: 'high',\n                cooldown: 120,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        3,\n                        5,\n                        10\n                    ],\n                    contacts: [\n                        'dev-team',\n                        'oncall',\n                        'management'\n                    ]\n                }\n            },\n            // Security thresholds\n            {\n                name: 'Failed Login Attempts',\n                metric: 'failed_logins',\n                warning: 10,\n                critical: 50,\n                enabled: true,\n                description: 'Failed authentication attempts threshold',\n                category: 'security',\n                severity: 'high',\n                cooldown: 300,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        50,\n                        100,\n                        200\n                    ],\n                    contacts: [\n                        'security-team',\n                        'oncall',\n                        'management'\n                    ]\n                }\n            },\n            {\n                name: 'API Rate Limit Exceeded',\n                metric: 'rate_limit_exceeded',\n                warning: 100,\n                critical: 1000,\n                enabled: true,\n                description: 'API rate limit violation threshold',\n                category: 'security',\n                severity: 'medium',\n                cooldown: 180,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        1000,\n                        5000,\n                        10000\n                    ],\n                    contacts: [\n                        'security-team',\n                        'dev-team'\n                    ]\n                }\n            },\n            // Business thresholds\n            {\n                name: 'Transaction Failure Rate',\n                metric: 'transaction_failure_rate',\n                warning: 1.0,\n                critical: 5.0,\n                enabled: true,\n                description: 'Business transaction failure threshold',\n                category: 'business',\n                severity: 'critical',\n                cooldown: 60,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        5.0,\n                        10.0,\n                        20.0\n                    ],\n                    contacts: [\n                        'business-team',\n                        'management',\n                        'executive'\n                    ]\n                }\n            },\n            {\n                name: 'Revenue Impact',\n                metric: 'revenue_impact',\n                warning: 1000,\n                critical: 10000,\n                enabled: true,\n                description: 'Revenue impact threshold',\n                category: 'business',\n                severity: 'critical',\n                cooldown: 300,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        10000,\n                        50000,\n                        100000\n                    ],\n                    contacts: [\n                        'business-team',\n                        'executive',\n                        'board'\n                    ]\n                }\n            }\n        ];\n        defaultThresholds.forEach((threshold)=>{\n            this.thresholds.set(threshold.name, threshold);\n        });\n    }\n    // Add or update a threshold\n    addThreshold(threshold) {\n        this.thresholds.set(threshold.name, threshold);\n        this.logThresholdChange('added', threshold);\n    }\n    // Remove a threshold\n    removeThreshold(name) {\n        const threshold = this.thresholds.get(name);\n        if (threshold) {\n            this.thresholds.delete(name);\n            this.logThresholdChange('removed', threshold);\n            return true;\n        }\n        return false;\n    }\n    // Get all thresholds\n    getAllThresholds() {\n        return Array.from(this.thresholds.values());\n    }\n    // Get threshold by name\n    getThreshold(name) {\n        return this.thresholds.get(name);\n    }\n    // Update threshold values\n    updateThreshold(name, updates) {\n        const threshold = this.thresholds.get(name);\n        if (threshold) {\n            const updatedThreshold = {\n                ...threshold,\n                ...updates\n            };\n            this.thresholds.set(name, updatedThreshold);\n            this.logThresholdChange('updated', updatedThreshold);\n            return true;\n        }\n        return false;\n    }\n    // Check if a metric value triggers an alert\n    checkThreshold(metric, value) {\n        const triggeredAlerts = [];\n        const now = Date.now();\n        for (const threshold of this.thresholds.values()){\n            if (!threshold.enabled || threshold.metric !== metric) continue;\n            // Check cooldown\n            if (threshold.lastTriggered && now - threshold.lastTriggered < threshold.cooldown * 1000) {\n                continue;\n            }\n            let status = null;\n            if (value >= threshold.critical) {\n                status = 'critical';\n            } else if (value >= threshold.warning) {\n                status = 'warning';\n            } else if (threshold.lastTriggered) {\n                // Check if we should resolve the alert\n                status = 'resolved';\n            }\n            if (status) {\n                var _correlationIDManager_getCurrentContext;\n                const alertEvent = {\n                    id: \"\".concat(threshold.name, \"_\").concat(now),\n                    threshold,\n                    value,\n                    status,\n                    timestamp: now,\n                    correlationId: (_correlationIDManager_getCurrentContext = _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.getCurrentContext()) === null || _correlationIDManager_getCurrentContext === void 0 ? void 0 : _correlationIDManager_getCurrentContext.correlationId,\n                    metadata: {\n                        metric,\n                        value,\n                        threshold: {\n                            warning: threshold.warning,\n                            critical: threshold.critical\n                        },\n                        category: threshold.category,\n                        severity: threshold.severity\n                    }\n                };\n                triggeredAlerts.push(alertEvent);\n                // Update last triggered time for warning/critical alerts\n                if (status !== 'resolved') {\n                    threshold.lastTriggered = now;\n                    this.thresholds.set(threshold.name, threshold);\n                }\n                // Log the alert\n                this.logAlert(alertEvent);\n            }\n        }\n        return triggeredAlerts;\n    }\n    // Start monitoring thresholds\n    startMonitoring() {\n        let intervalMs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 30000;\n        if (this.isMonitoring) return;\n        this.isMonitoring = true;\n        this.monitoringInterval = setInterval(()=>{\n            this.runThresholdChecks();\n        }, intervalMs);\n        console.log('Alert threshold monitoring started with interval:', intervalMs, 'ms');\n    }\n    // Stop monitoring thresholds\n    stopMonitoring() {\n        if (this.monitoringInterval) {\n            clearInterval(this.monitoringInterval);\n            this.monitoringInterval = null;\n        }\n        this.isMonitoring = false;\n        console.log('Alert threshold monitoring stopped');\n    }\n    // Run threshold checks (placeholder for actual metric collection)\n    async runThresholdChecks() {\n        // This would typically collect metrics from various sources\n        // For now, we'll just log that monitoring is active\n        const activeThresholds = this.getAllThresholds().filter((t)=>t.enabled);\n        if (activeThresholds.length > 0) {\n            console.log(\"Monitoring \".concat(activeThresholds.length, \" active thresholds\"));\n        }\n    }\n    // Get alert history\n    getAlertHistory() {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 100;\n        return this.alertHistory.slice(-limit);\n    }\n    // Clear alert history\n    clearAlertHistory() {\n        this.alertHistory = [];\n    }\n    // Get alerts by status\n    getAlertsByStatus(status) {\n        return this.alertHistory.filter((alert)=>alert.status === status);\n    }\n    // Get alerts by category\n    getAlertsByCategory(category) {\n        return this.alertHistory.filter((alert)=>alert.threshold.category === category);\n    }\n    // Get alerts by severity\n    getAlertsBySeverity(severity) {\n        return this.alertHistory.filter((alert)=>alert.threshold.severity === severity);\n    }\n    // Log threshold changes\n    logThresholdChange(action, threshold) {\n        const context = _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.getCurrentContext();\n        if (context) {\n            _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.logContext(context, 'info');\n        }\n        console.log(\"\\uD83D\\uDD14 Alert threshold \".concat(action, \":\"), {\n            name: threshold.name,\n            metric: threshold.metric,\n            warning: threshold.warning,\n            critical: threshold.critical,\n            category: threshold.category,\n            severity: threshold.severity,\n            correlationId: context === null || context === void 0 ? void 0 : context.correlationId\n        });\n    }\n    // Log alerts\n    logAlert(alert) {\n        // Add to history\n        this.alertHistory.push(alert);\n        if (this.alertHistory.length > 1000) {\n            this.alertHistory = this.alertHistory.slice(-1000);\n        }\n        // Log the alert\n        const emoji = alert.status === 'critical' ? '🚨' : alert.status === 'warning' ? '⚠️' : '✅';\n        console.log(\"\".concat(emoji, \" Alert triggered:\"), {\n            name: alert.threshold.name,\n            status: alert.status,\n            value: alert.value,\n            threshold: alert.threshold,\n            timestamp: new Date(alert.timestamp).toISOString(),\n            correlationId: alert.correlationId\n        });\n        // TODO: Send alerts to external systems (Slack, PagerDuty, etc.)\n        this.sendExternalAlert(alert);\n    }\n    // Send external alert (placeholder)\n    async sendExternalAlert(alert) {\n        // This would integrate with external alerting systems\n        // For now, we'll just log that we would send it\n        console.log(\"\\uD83D\\uDCE4 Would send external alert for: \".concat(alert.threshold.name));\n    }\n    // Get monitoring status\n    getMonitoringStatus() {\n        return {\n            isActive: this.isMonitoring,\n            interval: this.monitoringInterval ? 30000 : null,\n            thresholdCount: this.thresholds.size\n        };\n    }\n    // Export thresholds to JSON\n    exportThresholds() {\n        return JSON.stringify(Array.from(this.thresholds.values()), null, 2);\n    }\n    // Import thresholds from JSON\n    importThresholds(jsonData) {\n        try {\n            const thresholds = JSON.parse(jsonData);\n            this.thresholds.clear();\n            thresholds.forEach((threshold)=>{\n                this.thresholds.set(threshold.name, threshold);\n            });\n            console.log(\"Imported \".concat(thresholds.length, \" thresholds\"));\n            return true;\n        } catch (error) {\n            console.error('Failed to import thresholds:', error);\n            return false;\n        }\n    }\n    constructor(){\n        this.thresholds = new Map();\n        this.alertHistory = [];\n        this.isMonitoring = false;\n        this.monitoringInterval = null;\n        this.initializeDefaultThresholds();\n    }\n}\n// Export singleton instance\nconst alertThresholdManager = AlertThresholdManager.getInstance();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/alert-thresholds.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/correlation-id.ts":
/*!***********************************!*\
  !*** ./src/lib/correlation-id.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CorrelationIDManager: () => (/* binding */ CorrelationIDManager),\n/* harmony export */   correlationIDManager: () => (/* binding */ correlationIDManager),\n/* harmony export */   fetchWithCorrelation: () => (/* binding */ fetchWithCorrelation),\n/* harmony export */   getCorrelationHeaders: () => (/* binding */ getCorrelationHeaders),\n/* harmony export */   useCorrelationID: () => (/* binding */ useCorrelationID)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n// Global correlation context\nlet globalCorrelationContext = null;\n// Correlation ID manager\nclass CorrelationIDManager {\n    static getInstance() {\n        if (!CorrelationIDManager.instance) {\n            CorrelationIDManager.instance = new CorrelationIDManager();\n        }\n        return CorrelationIDManager.instance;\n    }\n    // Generate a new correlation context\n    generateContext(parentId, userId, tenantId, sessionId) {\n        let metadata = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};\n        const correlationId = (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n        const requestId = (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n        const spanId = (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n        const traceId = parentId || (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n        const context = {\n            correlationId,\n            requestId,\n            parentId,\n            spanId,\n            traceId,\n            userId,\n            tenantId,\n            sessionId,\n            timestamp: Date.now(),\n            metadata: {\n                service: 'frontend',\n                version: process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0',\n                environment: \"development\" || 0,\n                ...metadata\n            }\n        };\n        this.contextMap.set(correlationId, context);\n        globalCorrelationContext = context;\n        return context;\n    }\n    // Get current correlation context\n    getCurrentContext() {\n        return globalCorrelationContext;\n    }\n    // Get context by correlation ID\n    getContext(correlationId) {\n        return this.contextMap.get(correlationId) || null;\n    }\n    // Set current context\n    setCurrentContext(context) {\n        globalCorrelationContext = context;\n        this.contextMap.set(context.correlationId, context);\n    }\n    // Clear current context\n    clearCurrentContext() {\n        globalCorrelationContext = null;\n    }\n    // Propagate correlation ID to headers\n    getHeaders() {\n        const context = this.getCurrentContext();\n        if (!context) return {};\n        return {\n            'X-Correlation-ID': context.correlationId,\n            'X-Request-ID': context.requestId,\n            'X-Span-ID': context.spanId,\n            'X-Trace-ID': context.traceId,\n            'X-Parent-ID': context.parentId || '',\n            'X-User-ID': context.userId || '',\n            'X-Tenant-ID': context.tenantId || '',\n            'X-Session-ID': context.sessionId || '',\n            'X-Timestamp': context.timestamp.toString(),\n            'X-Service': 'frontend'\n        };\n    }\n    // Extract correlation ID from headers\n    extractFromHeaders(headers) {\n        const correlationId = headers['x-correlation-id'] || headers['X-Correlation-ID'];\n        if (!correlationId) return null;\n        const context = this.getContext(correlationId);\n        if (context) {\n            this.setCurrentContext(context);\n            return context;\n        }\n        // Create new context from headers, preserving the incoming correlation ID\n        const newContext = {\n            correlationId: correlationId,\n            requestId: headers['x-request-id'] || headers['X-Request-ID'] || (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n            parentId: headers['x-parent-id'] || headers['X-Parent-ID'] || undefined,\n            spanId: headers['x-span-id'] || headers['X-Span-ID'] || (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n            traceId: headers['x-trace-id'] || headers['X-Trace-ID'] || correlationId,\n            userId: headers['x-user-id'] || headers['X-User-ID'] || undefined,\n            tenantId: headers['x-tenant-id'] || headers['X-Tenant-ID'] || undefined,\n            sessionId: headers['x-session-id'] || headers['X-Session-ID'] || undefined,\n            timestamp: parseInt(headers['x-timestamp'] || headers['X-Timestamp'] || Date.now().toString()),\n            metadata: {\n                service: headers['x-service'] || headers['X-Service'] || 'unknown',\n                version: process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0',\n                environment: \"development\" || 0\n            }\n        };\n        this.setCurrentContext(newContext);\n        return newContext;\n    }\n    // Create child span\n    createChildSpan() {\n        let metadata = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const parentContext = this.getCurrentContext();\n        if (!parentContext) {\n            return this.generateContext(undefined, undefined, undefined, undefined, metadata);\n        }\n        const childContext = {\n            ...parentContext,\n            requestId: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n            spanId: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n            parentId: parentContext.spanId,\n            timestamp: Date.now(),\n            metadata: {\n                ...parentContext.metadata,\n                ...metadata,\n                parentSpanId: parentContext.spanId\n            }\n        };\n        this.contextMap.set(childContext.correlationId, childContext);\n        return childContext;\n    }\n    // Log correlation context\n    logContext(context) {\n        let level = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'info';\n        const logData = {\n            level,\n            correlationId: context.correlationId,\n            requestId: context.requestId,\n            spanId: context.spanId,\n            traceId: context.traceId,\n            parentId: context.parentId,\n            userId: context.userId,\n            tenantId: context.tenantId,\n            sessionId: context.sessionId,\n            timestamp: context.timestamp,\n            metadata: context.metadata\n        };\n        switch(level){\n            case 'error':\n                console.error('🔗 Correlation Context:', logData);\n                break;\n            case 'warn':\n                console.warn('🔗 Correlation Context:', logData);\n                break;\n            default:\n                console.log('🔗 Correlation Context:', logData);\n        }\n    }\n    // Get all contexts for a trace\n    getTraceContexts(traceId) {\n        return Array.from(this.contextMap.values()).filter((context)=>context.traceId === traceId);\n    }\n    // Clean up old contexts (older than 1 hour)\n    cleanup() {\n        const oneHourAgo = Date.now() - 60 * 60 * 1000;\n        for (const [correlationId, context] of this.contextMap.entries()){\n            if (context.timestamp < oneHourAgo) {\n                this.contextMap.delete(correlationId);\n            }\n        }\n    }\n    constructor(){\n        this.contextMap = new Map();\n    }\n}\n// Export singleton instance\nconst correlationIDManager = CorrelationIDManager.getInstance();\n// React hook for correlation ID\nfunction useCorrelationID() {\n    const context = correlationIDManager.getCurrentContext();\n    const generateNew = (parentId, userId, tenantId, sessionId, metadata)=>{\n        return correlationIDManager.generateContext(parentId, userId, tenantId, sessionId, metadata);\n    };\n    const getHeaders = ()=>correlationIDManager.getHeaders();\n    const logContext = function() {\n        let level = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 'info';\n        if (context) correlationIDManager.logContext(context, level);\n    };\n    return {\n        context,\n        generateNew,\n        getHeaders,\n        logContext,\n        correlationId: context === null || context === void 0 ? void 0 : context.correlationId,\n        requestId: context === null || context === void 0 ? void 0 : context.requestId,\n        spanId: context === null || context === void 0 ? void 0 : context.spanId,\n        traceId: context === null || context === void 0 ? void 0 : context.traceId\n    };\n}\n// Utility function to add correlation headers to fetch requests\nfunction fetchWithCorrelation(url) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const headers = correlationIDManager.getHeaders();\n    const enhancedOptions = {\n        ...options,\n        headers: {\n            ...headers,\n            ...options.headers\n        }\n    };\n    return fetch(url, enhancedOptions);\n}\n// Utility function to add correlation headers to axios requests\nfunction getCorrelationHeaders() {\n    return correlationIDManager.getHeaders();\n}\n// Auto-cleanup every hour\nif (true) {\n    setInterval(()=>{\n        correlationIDManager.cleanup();\n    }, 60 * 60 * 1000); // 1 hour\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/correlation-id.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/health-monitoring-simple.ts":
/*!*********************************************!*\
  !*** ./src/lib/health-monitoring-simple.ts ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   healthMonitoring: () => (/* binding */ healthMonitoring)\n/* harmony export */ });\n/* harmony import */ var _correlation_id__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./correlation-id */ \"(app-pages-browser)/./src/lib/correlation-id.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n// Default health check configurations\nconst DEFAULT_HEALTH_CHECKS = [\n    {\n        name: 'system',\n        endpoint: 'internal',\n        timeout: 5000,\n        critical: false,\n        retries: 2\n    },\n    {\n        name: 'frontend',\n        endpoint: '/api/health',\n        timeout: 5000,\n        expectedStatus: 200,\n        critical: true,\n        retries: 3\n    },\n    {\n        name: 'backend-api',\n        endpoint: process.env.NEXT_PUBLIC_HEALTH_API_URL || 'http://localhost:8000/health',\n        timeout: 5000,\n        expectedStatus: 200,\n        critical: true,\n        retries: 3\n    }\n];\n// Health monitoring service\nclass HealthMonitoringService {\n    // Run a single health check\n    async runHealthCheck(config) {\n        var _correlationIDManager_getCurrentContext;\n        const startTime = Date.now();\n        const correlationId = (_correlationIDManager_getCurrentContext = _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.getCurrentContext()) === null || _correlationIDManager_getCurrentContext === void 0 ? void 0 : _correlationIDManager_getCurrentContext.correlationId;\n        try {\n            let result;\n            if (config.endpoint === 'internal') {\n                // Internal system check\n                result = await this.runInternalHealthCheck(config);\n            } else {\n                // External endpoint check\n                result = await this.runExternalHealthCheck(config);\n            }\n            // Add correlation ID to result\n            if (correlationId) {\n                result.correlationId = correlationId;\n            }\n            return result;\n        } catch (error) {\n            const responseTime = Date.now() - startTime;\n            return {\n                status: 'fail',\n                responseTime,\n                error: error instanceof Error ? error.message : String(error),\n                timestamp: new Date().toISOString(),\n                correlationId\n            };\n        }\n    }\n    // Run internal health check\n    async runInternalHealthCheck(config) {\n        const startTime = Date.now();\n        try {\n            // Check system resources\n            const systemInfo = await this.getSystemInfo();\n            const responseTime = Date.now() - startTime;\n            return {\n                status: 'pass',\n                responseTime,\n                details: systemInfo,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            const responseTime = Date.now() - startTime;\n            return {\n                status: 'fail',\n                responseTime,\n                error: error instanceof Error ? error.message : String(error),\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    // Run external health check\n    async runExternalHealthCheck(config) {\n        const startTime = Date.now();\n        let lastError = null;\n        // Try with retries\n        for(let attempt = 1; attempt <= config.retries; attempt++){\n            try {\n                const headers = {\n                    ...(0,_correlation_id__WEBPACK_IMPORTED_MODULE_0__.getCorrelationHeaders)(),\n                    ...config.headers,\n                    'User-Agent': 'Health-Monitor/1.0'\n                };\n                const controller = new AbortController();\n                const timeoutId = setTimeout(()=>controller.abort(), config.timeout);\n                const response = await fetch(config.endpoint, {\n                    method: 'HEAD',\n                    headers,\n                    signal: controller.signal\n                });\n                clearTimeout(timeoutId);\n                const responseTime = Date.now() - startTime;\n                if (config.expectedStatus && response.status !== config.expectedStatus) {\n                    throw new Error(\"Expected status \".concat(config.expectedStatus, \", got \").concat(response.status));\n                }\n                return {\n                    status: response.status < 400 ? 'pass' : response.status < 500 ? 'warn' : 'fail',\n                    responseTime,\n                    details: {\n                        status: response.status,\n                        statusText: response.statusText,\n                        headers: Object.fromEntries(response.headers.entries())\n                    },\n                    timestamp: new Date().toISOString()\n                };\n            } catch (error) {\n                lastError = error instanceof Error ? error : new Error(String(error));\n                // If this is the last attempt, throw the error\n                if (attempt === config.retries) {\n                    break;\n                }\n                // Wait before retry (exponential backoff)\n                await new Promise((resolve)=>setTimeout(resolve, Math.pow(2, attempt) * 100));\n            }\n        }\n        const responseTime = Date.now() - startTime;\n        throw lastError || new Error('Health check failed after all retries');\n    }\n    // Get system information\n    async getSystemInfo() {\n        if (false) {}\n        // Client-side\n        return {\n            platform: 'browser',\n            userAgent: navigator.userAgent,\n            language: navigator.language,\n            cookieEnabled: navigator.cookieEnabled,\n            onLine: navigator.onLine,\n            timestamp: new Date().toISOString()\n        };\n    }\n    // Run comprehensive health check\n    async runComprehensiveHealthCheck() {\n        var _correlationIDManager_getCurrentContext;\n        const startTime = Date.now();\n        const correlationId = (_correlationIDManager_getCurrentContext = _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.getCurrentContext()) === null || _correlationIDManager_getCurrentContext === void 0 ? void 0 : _correlationIDManager_getCurrentContext.correlationId;\n        // Generate correlation context for this health check\n        const healthCheckContext = _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.generateContext(correlationId, undefined, undefined, undefined, {\n            operation: 'health_check',\n            type: 'comprehensive'\n        });\n        try {\n            const checkResults = {};\n            const checkPromises = DEFAULT_HEALTH_CHECKS.map(async (config)=>{\n                const result = await this.runHealthCheck(config);\n                checkResults[config.name] = result;\n                return result;\n            });\n            await Promise.allSettled(checkPromises);\n            // Calculate summary\n            const summary = this.calculateHealthSummary(checkResults);\n            // Determine overall status\n            let status = 'healthy';\n            if (summary.failedChecks > 0) {\n                status = 'unhealthy';\n            } else if (summary.warningChecks > 0 || summary.overallHealth < 90) {\n                status = 'degraded';\n            }\n            const result = {\n                status,\n                timestamp: new Date().toISOString(),\n                checks: checkResults,\n                summary,\n                metadata: {\n                    service: 'AI SaaS Factory - Next.js Frontend',\n                    region: 'local',\n                    instance: 'localhost',\n                    build: 'local',\n                    commit: 'local',\n                    correlationId: healthCheckContext.correlationId\n                }\n            };\n            // Add to history\n            this.healthHistory.push(result);\n            if (this.healthHistory.length > 100) {\n                this.healthHistory = this.healthHistory.slice(-100);\n            }\n            // Update metrics\n            this.updateMetrics(result);\n            // Log correlation context\n            _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.logContext(healthCheckContext, 'info');\n            return result;\n        } catch (error) {\n            const responseTime = Date.now() - startTime;\n            // Create error result\n            const errorResult = {\n                status: 'unhealthy',\n                timestamp: new Date().toISOString(),\n                checks: {},\n                summary: {\n                    overallHealth: 0,\n                    totalChecks: 0,\n                    passedChecks: 0,\n                    failedChecks: 1,\n                    warningChecks: 0,\n                    averageResponseTime: responseTime\n                },\n                metadata: {\n                    service: 'AI SaaS Factory - Next.js Frontend',\n                    region: 'local',\n                    instance: 'localhost',\n                    build: 'local',\n                    commit: 'local',\n                    correlationId: healthCheckContext.correlationId\n                }\n            };\n            // Log error with correlation context\n            _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.logContext(healthCheckContext, 'error');\n            return errorResult;\n        } finally{\n            // Clear the health check context\n            _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.clearCurrentContext();\n        }\n    }\n    // Calculate health summary\n    calculateHealthSummary(checks) {\n        const checkArray = Object.values(checks);\n        const totalChecks = checkArray.length;\n        const passedChecks = checkArray.filter((c)=>c.status === 'pass').length;\n        const failedChecks = checkArray.filter((c)=>c.status === 'fail').length;\n        const warningChecks = checkArray.filter((c)=>c.status === 'warn').length;\n        const overallHealth = totalChecks > 0 ? passedChecks / totalChecks * 100 : 0;\n        const averageResponseTime = checkArray.length > 0 ? checkArray.reduce((sum, c)=>sum + c.responseTime, 0) / checkArray.length : 0;\n        return {\n            overallHealth: Math.round(overallHealth),\n            totalChecks,\n            passedChecks,\n            failedChecks,\n            warningChecks,\n            averageResponseTime: Math.round(averageResponseTime)\n        };\n    }\n    // Update metrics history\n    updateMetrics(healthResult) {\n        const metrics = {\n            overallScore: healthResult.summary.overallHealth,\n            errorRate: healthResult.summary.failedChecks / healthResult.summary.totalChecks,\n            responseTime: healthResult.summary.averageResponseTime,\n            uptime: healthResult.status === 'healthy' ? 100 : healthResult.status === 'degraded' ? 75 : 0,\n            lastCheck: healthResult.timestamp\n        };\n        this.metricsHistory.push(metrics);\n        if (this.metricsHistory.length > 1000) {\n            this.metricsHistory = this.metricsHistory.slice(-1000);\n        }\n    }\n    // Start monitoring\n    startMonitoring() {\n        let intervalMs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 30000;\n        if (this.isMonitoring) return;\n        this.isMonitoring = true;\n        this.monitoringInterval = setInterval(async ()=>{\n            try {\n                await this.runComprehensiveHealthCheck();\n            } catch (error) {\n                console.error('Health monitoring error:', error);\n            }\n        }, intervalMs);\n        console.log('Health monitoring started with interval:', intervalMs, 'ms');\n    }\n    // Stop monitoring\n    stopMonitoring() {\n        if (this.monitoringInterval) {\n            clearInterval(this.monitoringInterval);\n            this.monitoringInterval = null;\n        }\n        this.isMonitoring = false;\n        console.log('Health monitoring stopped');\n    }\n    // Get current health\n    getCurrentHealth() {\n        return this.healthHistory.length > 0 ? this.healthHistory[this.healthHistory.length - 1] : null;\n    }\n    // Get health history\n    getHealthHistory() {\n        return [\n            ...this.healthHistory\n        ];\n    }\n    // Get metrics history\n    getMetricsHistory() {\n        return [\n            ...this.metricsHistory\n        ];\n    }\n    // Check if monitoring is active\n    isMonitoringActive() {\n        return this.isMonitoring;\n    }\n    // Get monitoring status\n    getMonitoringStatus() {\n        return {\n            isActive: this.isMonitoring,\n            interval: this.monitoringInterval ? 30000 : null\n        };\n    }\n    constructor(){\n        this.healthHistory = [];\n        this.metricsHistory = [];\n        this.isMonitoring = false;\n        this.monitoringInterval = null;\n    }\n}\n// Export singleton instance\nconst healthMonitoring = new HealthMonitoringService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/health-monitoring-simple.ts\n"));

/***/ })

});