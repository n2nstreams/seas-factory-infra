"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"534be6851d9b\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyIvVXNlcnMvbWFjbWluaS9Eb2N1bWVudHMvUHJvamVjdHMvU2FhUyBGYWN0b3J5L3VpL25leHRqcy9zcmMvYXBwL2dsb2JhbHMuY3NzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiNTM0YmU2ODUxZDliXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/health-monitoring-simple.ts":
/*!*********************************************!*\
  !*** ./src/lib/health-monitoring-simple.ts ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   healthMonitoring: () => (/* binding */ healthMonitoring)\n/* harmony export */ });\n/* harmony import */ var _correlation_id__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./correlation-id */ \"(app-pages-browser)/./src/lib/correlation-id.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n// Default health check configurations\nconst DEFAULT_HEALTH_CHECKS = [\n    {\n        name: 'system',\n        endpoint: 'internal',\n        timeout: 5000,\n        critical: false,\n        retries: 2\n    },\n    // Remove frontend self-check to avoid circular dependency\n    // The frontend health is determined by the overall API response\n    {\n        name: 'backend-api',\n        endpoint: process.env.NEXT_PUBLIC_HEALTH_API_URL || 'http://localhost:8000/health',\n        timeout: 5000,\n        expectedStatus: 200,\n        critical: true,\n        retries: 3,\n        method: 'GET'\n    }\n];\n// Health monitoring service\nclass HealthMonitoringService {\n    // Run a single health check\n    async runHealthCheck(config) {\n        var _correlationIDManager_getCurrentContext;\n        const startTime = Date.now();\n        const correlationId = (_correlationIDManager_getCurrentContext = _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.getCurrentContext()) === null || _correlationIDManager_getCurrentContext === void 0 ? void 0 : _correlationIDManager_getCurrentContext.correlationId;\n        try {\n            let result;\n            if (config.endpoint === 'internal') {\n                // Internal system check\n                result = await this.runInternalHealthCheck(config);\n            } else {\n                // External endpoint check\n                result = await this.runExternalHealthCheck(config);\n            }\n            // Add correlation ID to result\n            if (correlationId) {\n                result.correlationId = correlationId;\n            }\n            return result;\n        } catch (error) {\n            const responseTime = Date.now() - startTime;\n            return {\n                status: 'fail',\n                responseTime,\n                error: error instanceof Error ? error.message : String(error),\n                timestamp: new Date().toISOString(),\n                correlationId\n            };\n        }\n    }\n    // Run internal health check\n    async runInternalHealthCheck(config) {\n        const startTime = Date.now();\n        try {\n            // Check system resources\n            const systemInfo = await this.getSystemInfo();\n            const responseTime = Date.now() - startTime;\n            return {\n                status: 'pass',\n                responseTime,\n                details: systemInfo,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            const responseTime = Date.now() - startTime;\n            return {\n                status: 'fail',\n                responseTime,\n                error: error instanceof Error ? error.message : String(error),\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    // Run external health check\n    async runExternalHealthCheck(config) {\n        const startTime = Date.now();\n        let lastError = null;\n        // Try with retries\n        for(let attempt = 1; attempt <= config.retries; attempt++){\n            try {\n                const headers = {\n                    ...(0,_correlation_id__WEBPACK_IMPORTED_MODULE_0__.getCorrelationHeaders)(),\n                    ...config.headers,\n                    'User-Agent': 'Health-Monitor/1.0'\n                };\n                const controller = new AbortController();\n                const timeoutId = setTimeout(()=>controller.abort(), config.timeout);\n                const response = await fetch(config.endpoint, {\n                    method: config.method || 'HEAD',\n                    headers,\n                    signal: controller.signal\n                });\n                clearTimeout(timeoutId);\n                const responseTime = Date.now() - startTime;\n                if (config.expectedStatus && response.status !== config.expectedStatus) {\n                    throw new Error(\"Expected status \".concat(config.expectedStatus, \", got \").concat(response.status));\n                }\n                return {\n                    status: response.status < 400 ? 'pass' : response.status < 500 ? 'warn' : 'fail',\n                    responseTime,\n                    details: {\n                        status: response.status,\n                        statusText: response.statusText,\n                        headers: Object.fromEntries(response.headers.entries())\n                    },\n                    timestamp: new Date().toISOString()\n                };\n            } catch (error) {\n                lastError = error instanceof Error ? error : new Error(String(error));\n                // If this is the last attempt, throw the error\n                if (attempt === config.retries) {\n                    break;\n                }\n                // Wait before retry (exponential backoff)\n                await new Promise((resolve)=>setTimeout(resolve, Math.pow(2, attempt) * 100));\n            }\n        }\n        const responseTime = Date.now() - startTime;\n        throw lastError || new Error('Health check failed after all retries');\n    }\n    // Get system information\n    async getSystemInfo() {\n        if (false) {}\n        // Client-side\n        return {\n            platform: 'browser',\n            userAgent: navigator.userAgent,\n            language: navigator.language,\n            cookieEnabled: navigator.cookieEnabled,\n            onLine: navigator.onLine,\n            timestamp: new Date().toISOString()\n        };\n    }\n    // Run comprehensive health check\n    async runComprehensiveHealthCheck() {\n        var _correlationIDManager_getCurrentContext;\n        const startTime = Date.now();\n        const correlationId = (_correlationIDManager_getCurrentContext = _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.getCurrentContext()) === null || _correlationIDManager_getCurrentContext === void 0 ? void 0 : _correlationIDManager_getCurrentContext.correlationId;\n        // Generate correlation context for this health check\n        const healthCheckContext = _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.generateContext(correlationId, undefined, undefined, undefined, {\n            operation: 'health_check',\n            type: 'comprehensive'\n        });\n        try {\n            const checkResults = {};\n            const checkPromises = DEFAULT_HEALTH_CHECKS.map(async (config)=>{\n                const result = await this.runHealthCheck(config);\n                checkResults[config.name] = result;\n                return result;\n            });\n            await Promise.allSettled(checkPromises);\n            // Calculate summary\n            const summary = this.calculateHealthSummary(checkResults);\n            // Determine overall status\n            let status = 'healthy';\n            if (summary.failedChecks > 0) {\n                status = 'unhealthy';\n            } else if (summary.warningChecks > 0 || summary.overallHealth < 90) {\n                status = 'degraded';\n            }\n            const result = {\n                status,\n                timestamp: new Date().toISOString(),\n                checks: checkResults,\n                summary,\n                metadata: {\n                    service: 'AI SaaS Factory - Next.js Frontend',\n                    region: 'local',\n                    instance: 'localhost',\n                    build: 'local',\n                    commit: 'local',\n                    correlationId: healthCheckContext.correlationId\n                }\n            };\n            // Add to history\n            this.healthHistory.push(result);\n            if (this.healthHistory.length > 100) {\n                this.healthHistory = this.healthHistory.slice(-100);\n            }\n            // Update metrics\n            this.updateMetrics(result);\n            // Log correlation context\n            _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.logContext(healthCheckContext, 'info');\n            return result;\n        } catch (error) {\n            const responseTime = Date.now() - startTime;\n            // Create error result\n            const errorResult = {\n                status: 'unhealthy',\n                timestamp: new Date().toISOString(),\n                checks: {},\n                summary: {\n                    overallHealth: 0,\n                    totalChecks: 0,\n                    passedChecks: 0,\n                    failedChecks: 1,\n                    warningChecks: 0,\n                    averageResponseTime: responseTime\n                },\n                metadata: {\n                    service: 'AI SaaS Factory - Next.js Frontend',\n                    region: 'local',\n                    instance: 'localhost',\n                    build: 'local',\n                    commit: 'local',\n                    correlationId: healthCheckContext.correlationId\n                }\n            };\n            // Log error with correlation context\n            _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.logContext(healthCheckContext, 'error');\n            return errorResult;\n        } finally{\n            // Clear the health check context\n            _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.clearCurrentContext();\n        }\n    }\n    // Calculate health summary\n    calculateHealthSummary(checks) {\n        const checkArray = Object.values(checks);\n        const totalChecks = checkArray.length;\n        const passedChecks = checkArray.filter((c)=>c.status === 'pass').length;\n        const failedChecks = checkArray.filter((c)=>c.status === 'fail').length;\n        const warningChecks = checkArray.filter((c)=>c.status === 'warn').length;\n        const overallHealth = totalChecks > 0 ? passedChecks / totalChecks * 100 : 0;\n        const averageResponseTime = checkArray.length > 0 ? checkArray.reduce((sum, c)=>sum + c.responseTime, 0) / checkArray.length : 0;\n        return {\n            overallHealth: Math.round(overallHealth),\n            totalChecks,\n            passedChecks,\n            failedChecks,\n            warningChecks,\n            averageResponseTime: Math.round(averageResponseTime)\n        };\n    }\n    // Update metrics history\n    updateMetrics(healthResult) {\n        const metrics = {\n            overallScore: healthResult.summary.overallHealth,\n            errorRate: healthResult.summary.failedChecks / healthResult.summary.totalChecks,\n            responseTime: healthResult.summary.averageResponseTime,\n            uptime: healthResult.status === 'healthy' ? 100 : healthResult.status === 'degraded' ? 75 : 0,\n            lastCheck: healthResult.timestamp\n        };\n        this.metricsHistory.push(metrics);\n        if (this.metricsHistory.length > 1000) {\n            this.metricsHistory = this.metricsHistory.slice(-1000);\n        }\n    }\n    // Get health history\n    getHealthHistory() {\n        return [\n            ...this.healthHistory\n        ];\n    }\n    // Get metrics history\n    getMetricsHistory() {\n        return [\n            ...this.metricsHistory\n        ];\n    }\n    // Start monitoring\n    startMonitoring() {\n        let intervalMs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 30000;\n        if (this.isMonitoring) return;\n        this.isMonitoring = true;\n        this.monitoringInterval = setInterval(async ()=>{\n            try {\n                await this.runComprehensiveHealthCheck();\n            } catch (error) {\n                console.error('Health monitoring error:', error);\n            }\n        }, intervalMs);\n        console.log('Health monitoring started with interval:', intervalMs, 'ms');\n    }\n    // Stop monitoring\n    stopMonitoring() {\n        if (this.monitoringInterval) {\n            clearInterval(this.monitoringInterval);\n            this.monitoringInterval = null;\n        }\n        this.isMonitoring = false;\n        console.log('Health monitoring stopped');\n    }\n    // Get current health\n    getCurrentHealth() {\n        return this.healthHistory.length > 0 ? this.healthHistory[this.healthHistory.length - 1] : null;\n    }\n    // Check if monitoring is active\n    isMonitoringActive() {\n        return this.isMonitoring;\n    }\n    // Get monitoring status\n    getMonitoringStatus() {\n        return {\n            isActive: this.isMonitoring,\n            interval: this.monitoringInterval ? 30000 : null\n        };\n    }\n    constructor(){\n        this.healthHistory = [];\n        this.metricsHistory = [];\n        this.isMonitoring = false;\n        this.monitoringInterval = null;\n    }\n}\n// Export singleton instance\nconst healthMonitoring = new HealthMonitoringService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/health-monitoring-simple.ts\n"));

/***/ })

});