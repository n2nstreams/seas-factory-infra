"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"38f8004e940d\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyIvVXNlcnMvbWFjbWluaS9Eb2N1bWVudHMvUHJvamVjdHMvU2FhUyBGYWN0b3J5L3VpL25leHRqcy9zcmMvYXBwL2dsb2JhbHMuY3NzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiMzhmODAwNGU5NDBkXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/health-monitoring-simple.ts":
/*!*********************************************!*\
  !*** ./src/lib/health-monitoring-simple.ts ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   healthMonitoring: () => (/* binding */ healthMonitoring)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// Simple Health Monitoring System\n// This version provides basic health checks without external dependencies\n// Default health check configurations\nconst DEFAULT_HEALTH_CHECKS = [\n    {\n        name: 'system',\n        endpoint: 'internal',\n        timeout: 5000,\n        critical: false,\n        retries: 2\n    },\n    {\n        name: 'frontend',\n        endpoint:  false ? 0 // Server-side: use full URL\n         : '/api/health',\n        timeout: 5000,\n        expectedStatus: 200,\n        critical: true,\n        retries: 3\n    },\n    {\n        name: 'backend-api',\n        endpoint: process.env.NEXT_PUBLIC_HEALTH_API_URL || 'http://localhost:8000/health',\n        timeout: 5000,\n        expectedStatus: 200,\n        critical: true,\n        retries: 3\n    }\n];\nclass SimpleHealthMonitoringService {\n    // Run comprehensive health check\n    async runHealthCheck() {\n        const startTime = Date.now();\n        const checks = {};\n        let totalChecks = 0;\n        let passedChecks = 0;\n        let failedChecks = 0;\n        let warningChecks = 0;\n        // Run all health checks in parallel\n        const checkPromises = DEFAULT_HEALTH_CHECKS.map(async (config)=>{\n            const checkStartTime = Date.now();\n            let retryCount = 0;\n            let lastError;\n            while(retryCount < config.retries){\n                try {\n                    const result = await this.performHealthCheck(config);\n                    const responseTime = Date.now() - checkStartTime;\n                    checks[config.name] = {\n                        ...result,\n                        responseTime\n                    };\n                    if (result.status === 'pass') {\n                        passedChecks++;\n                    } else if (result.status === 'warn') {\n                        warningChecks++;\n                    } else {\n                        failedChecks++;\n                    }\n                    break; // Success, no need to retry\n                } catch (error) {\n                    lastError = error instanceof Error ? error.message : String(error);\n                    retryCount++;\n                    if (retryCount >= config.retries) {\n                        checks[config.name] = {\n                            status: 'fail',\n                            error: lastError\n                        };\n                        failedChecks++;\n                    } else {\n                        // Wait before retry\n                        await new Promise((resolve)=>setTimeout(resolve, 1000 * retryCount));\n                    }\n                }\n            }\n        });\n        await Promise.all(checkPromises);\n        totalChecks = Object.keys(checks).length;\n        const overallHealth = totalChecks > 0 ? passedChecks / totalChecks * 100 : 0;\n        const healthResult = {\n            status: this.determineOverallStatus(overallHealth, failedChecks),\n            timestamp: new Date().toISOString(),\n            checks,\n            summary: {\n                totalChecks,\n                passedChecks,\n                failedChecks,\n                warningChecks,\n                overallHealth: Math.round(overallHealth)\n            }\n        };\n        // Store in history\n        this.healthHistory.push(healthResult);\n        if (this.healthHistory.length > 100) {\n            this.healthHistory = this.healthHistory.slice(-100);\n        }\n        // Calculate and store health index metrics\n        await this.calculateHealthIndexMetrics(healthResult);\n        console.log('Health check completed:', healthResult.summary);\n        return healthResult;\n    }\n    // Perform individual health check\n    async performHealthCheck(config) {\n        if (config.endpoint === 'internal') {\n            return this.performInternalHealthCheck(config);\n        }\n        const controller = new AbortController();\n        const timeoutId = setTimeout(()=>controller.abort(), config.timeout);\n        try {\n            const response = await fetch(config.endpoint, {\n                method: 'GET',\n                signal: controller.signal,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            clearTimeout(timeoutId);\n            if (response.ok) {\n                const data = await response.json();\n                return {\n                    status: 'pass',\n                    details: data\n                };\n            } else if (response.status >= 500) {\n                return {\n                    status: 'fail',\n                    details: {\n                        status: response.status,\n                        statusText: response.statusText\n                    }\n                };\n            } else {\n                return {\n                    status: 'warn',\n                    details: {\n                        status: response.status,\n                        statusText: response.statusText\n                    }\n                };\n            }\n        } catch (error) {\n            clearTimeout(timeoutId);\n            if (error instanceof Error && error.name === 'AbortError') {\n                throw new Error(\"Health check timeout after \".concat(config.timeout, \"ms\"));\n            }\n            throw error;\n        }\n    }\n    // Perform internal health checks\n    async performInternalHealthCheck(config) {\n        try {\n            switch(config.name){\n                case 'system':\n                    // Basic system health check that doesn't require external services\n                    return {\n                        status: 'pass',\n                        details: {\n                            uptime: process.uptime(),\n                            memory: process.memoryUsage(),\n                            nodeVersion: process.version,\n                            platform: process.platform,\n                            timestamp: new Date().toISOString()\n                        }\n                    };\n                default:\n                    return {\n                        status: 'warn',\n                        details: {\n                            error: 'Unknown internal health check'\n                        }\n                    };\n            }\n        } catch (error) {\n            return {\n                status: 'warn',\n                details: {\n                    error: error instanceof Error ? error.message : String(error),\n                    message: 'Internal health check failed'\n                }\n            };\n        }\n    }\n    // Determine overall health status\n    determineOverallStatus(overallHealth, failedChecks) {\n        if (overallHealth >= 90 && failedChecks === 0) {\n            return 'healthy';\n        } else if (overallHealth >= 70 && failedChecks <= 1) {\n            return 'degraded';\n        } else {\n            return 'unhealthy';\n        }\n    }\n    // Calculate health index metrics\n    async calculateHealthIndexMetrics(healthResult) {\n        const now = new Date();\n        const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);\n        // Get recent health checks for metrics calculation\n        const recentChecks = this.healthHistory.filter((check)=>new Date(check.timestamp) >= oneHourAgo);\n        if (recentChecks.length === 0) return;\n        // Calculate error rate\n        const totalChecks = recentChecks.reduce((sum, check)=>sum + check.summary.totalChecks, 0);\n        const totalFailures = recentChecks.reduce((sum, check)=>sum + check.summary.failedChecks, 0);\n        const errorRate = totalChecks > 0 ? totalFailures / totalChecks : 0;\n        // Calculate average response time\n        const responseTimes = recentChecks.flatMap((check)=>Object.values(check.checks).map((c)=>c.responseTime).filter((rt)=>rt !== undefined));\n        const avgResponseTime = responseTimes.length > 0 ? responseTimes.reduce((sum, rt)=>sum + rt, 0) / responseTimes.length : 0;\n        // Calculate uptime (simplified - just check if we have recent health checks)\n        const uptime = recentChecks.length > 0 ? 1.0 : 0.0;\n        // Create metrics entry\n        const metrics = {\n            timestamp: now.toISOString(),\n            errorRate: errorRate * 100,\n            responseTime: avgResponseTime,\n            uptime: uptime * 100,\n            jobFailures: 0,\n            authFailures: 0,\n            webhookFailures: 0,\n            overallScore: healthResult.summary.overallHealth\n        };\n        this.metricsHistory.push(metrics);\n        if (this.metricsHistory.length > 1000) {\n            this.metricsHistory = this.metricsHistory.slice(-1000);\n        }\n    }\n    // Get health history\n    getHealthHistory() {\n        return [\n            ...this.healthHistory\n        ];\n    }\n    // Get metrics history\n    getMetricsHistory() {\n        return [\n            ...this.metricsHistory\n        ];\n    }\n    // Start monitoring (placeholder for future implementation)\n    async startMonitoring() {\n        let intervalMs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 30000;\n        console.log(\"Health monitoring started with \".concat(intervalMs, \"ms interval\"));\n    }\n    // Stop monitoring (placeholder for future implementation)\n    stopMonitoring() {\n        console.log('Health monitoring stopped');\n    }\n    constructor(){\n        this.healthHistory = [];\n        this.metricsHistory = [];\n    }\n}\n// Export singleton instance\nconst healthMonitoring = new SimpleHealthMonitoringService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/health-monitoring-simple.ts\n"));

/***/ })

});