"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"40cb514dd78b\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyIvVXNlcnMvbWFjbWluaS9Eb2N1bWVudHMvUHJvamVjdHMvU2FhUyBGYWN0b3J5L3VpL25leHRqcy9zcmMvYXBwL2dsb2JhbHMuY3NzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiNDBjYjUxNGRkNzhiXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/providers/ObservabilityProvider.tsx":
/*!************************************************************!*\
  !*** ./src/components/providers/ObservabilityProvider.tsx ***!
  \************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObservabilityProvider: () => (/* binding */ ObservabilityProvider),\n/* harmony export */   useAlertThresholds: () => (/* binding */ useAlertThresholds),\n/* harmony export */   useHealthMonitoring: () => (/* binding */ useHealthMonitoring),\n/* harmony export */   useObservabilityCorrelationID: () => (/* binding */ useObservabilityCorrelationID),\n/* harmony export */   useSystemStatus: () => (/* binding */ useSystemStatus)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_health_monitoring_simple__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/health-monitoring-simple */ \"(app-pages-browser)/./src/lib/health-monitoring-simple.ts\");\n/* harmony import */ var _lib_correlation_id__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/correlation-id */ \"(app-pages-browser)/./src/lib/correlation-id.ts\");\n/* harmony import */ var _lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/alert-thresholds */ \"(app-pages-browser)/./src/lib/alert-thresholds.ts\");\n/* __next_internal_client_entry_do_not_use__ ObservabilityProvider,useHealthMonitoring,useObservabilityCorrelationID,useAlertThresholds,useSystemStatus auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$();\n\n\n\n\n// Create observability context\nconst ObservabilityContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n// Observability provider component\nfunction ObservabilityProvider(param) {\n    let { children } = param;\n    _s();\n    // Health monitoring state\n    const [currentHealth, setCurrentHealth] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [healthHistory, setHealthHistory] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [metricsHistory, setMetricsHistory] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [isMonitoring, setIsMonitoring] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Alert threshold state\n    const [alertThresholds, setAlertThresholds] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [alertHistory, setAlertHistory] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [isAlertMonitoring, setIsAlertMonitoring] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // System status state\n    const [systemStatus, setSystemStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        health: 'healthy',\n        alerts: {\n            warning: 0,\n            critical: 0,\n            resolved: 0\n        },\n        uptime: 0,\n        lastUpdate: new Date().toISOString()\n    });\n    // Initialize correlation ID context for this provider\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ObservabilityProvider.useEffect\": ()=>{\n            const context = _lib_correlation_id__WEBPACK_IMPORTED_MODULE_3__.correlationIDManager.generateContext(undefined, undefined, undefined, undefined, {\n                operation: 'observability_provider_init',\n                component: 'ObservabilityProvider'\n            });\n            // Log the initialization\n            _lib_correlation_id__WEBPACK_IMPORTED_MODULE_3__.correlationIDManager.logContext(context, 'info');\n        }\n    }[\"ObservabilityProvider.useEffect\"], []);\n    // Initialize health monitoring\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ObservabilityProvider.useEffect\": ()=>{\n            const initializeHealthMonitoring = {\n                \"ObservabilityProvider.useEffect.initializeHealthMonitoring\": async ()=>{\n                    try {\n                        // Run initial health check\n                        await runHealthCheck();\n                        // Start monitoring\n                        startMonitoring();\n                    } catch (error) {\n                        console.error('Failed to initialize health monitoring:', error);\n                    }\n                }\n            }[\"ObservabilityProvider.useEffect.initializeHealthMonitoring\"];\n            initializeHealthMonitoring();\n            return ({\n                \"ObservabilityProvider.useEffect\": ()=>{\n                    stopMonitoring();\n                }\n            })[\"ObservabilityProvider.useEffect\"];\n        }\n    }[\"ObservabilityProvider.useEffect\"], []);\n    // Initialize alert thresholds\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ObservabilityProvider.useEffect\": ()=>{\n            const thresholds = _lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__.alertThresholdManager.getAllThresholds();\n            setAlertThresholds(thresholds);\n            // Start alert monitoring\n            startAlertMonitoring();\n            return ({\n                \"ObservabilityProvider.useEffect\": ()=>{\n                    stopAlertMonitoring();\n                }\n            })[\"ObservabilityProvider.useEffect\"];\n        }\n    }[\"ObservabilityProvider.useEffect\"], []);\n    // Update system status periodically\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ObservabilityProvider.useEffect\": ()=>{\n            const updateSystemStatus = {\n                \"ObservabilityProvider.useEffect.updateSystemStatus\": ()=>{\n                    const health = (currentHealth === null || currentHealth === void 0 ? void 0 : currentHealth.status) || 'healthy';\n                    const alerts = {\n                        warning: alertHistory.filter({\n                            \"ObservabilityProvider.useEffect.updateSystemStatus\": (a)=>a.status === 'warning'\n                        }[\"ObservabilityProvider.useEffect.updateSystemStatus\"]).length,\n                        critical: alertHistory.filter({\n                            \"ObservabilityProvider.useEffect.updateSystemStatus\": (a)=>a.status === 'critical'\n                        }[\"ObservabilityProvider.useEffect.updateSystemStatus\"]).length,\n                        resolved: alertHistory.filter({\n                            \"ObservabilityProvider.useEffect.updateSystemStatus\": (a)=>a.status === 'resolved'\n                        }[\"ObservabilityProvider.useEffect.updateSystemStatus\"]).length\n                    };\n                    const uptime = currentHealth ? Date.now() - new Date(currentHealth.timestamp).getTime() : 0;\n                    setSystemStatus({\n                        health,\n                        alerts,\n                        uptime,\n                        lastUpdate: new Date().toISOString()\n                    });\n                }\n            }[\"ObservabilityProvider.useEffect.updateSystemStatus\"];\n            const interval = setInterval(updateSystemStatus, 10000) // Update every 10 seconds\n            ;\n            updateSystemStatus(); // Initial update\n            return ({\n                \"ObservabilityProvider.useEffect\": ()=>clearInterval(interval)\n            })[\"ObservabilityProvider.useEffect\"];\n        }\n    }[\"ObservabilityProvider.useEffect\"], [\n        currentHealth,\n        alertHistory\n    ]);\n    // Health monitoring functions\n    const startMonitoring = ()=>{\n        _lib_health_monitoring_simple__WEBPACK_IMPORTED_MODULE_2__.healthMonitoring.startMonitoring();\n        setIsMonitoring(true);\n    };\n    const stopMonitoring = ()=>{\n        _lib_health_monitoring_simple__WEBPACK_IMPORTED_MODULE_2__.healthMonitoring.stopMonitoring();\n        setIsMonitoring(false);\n    };\n    const runHealthCheck = async ()=>{\n        try {\n            const result = await _lib_health_monitoring_simple__WEBPACK_IMPORTED_MODULE_2__.healthMonitoring.runComprehensiveHealthCheck();\n            setCurrentHealth(result);\n            setHealthHistory(_lib_health_monitoring_simple__WEBPACK_IMPORTED_MODULE_2__.healthMonitoring.getHealthHistory());\n            setMetricsHistory(_lib_health_monitoring_simple__WEBPACK_IMPORTED_MODULE_2__.healthMonitoring.getMetricsHistory());\n        } catch (error) {\n            console.error('Health check failed:', error);\n        }\n    };\n    // Alert monitoring functions\n    const startAlertMonitoring = ()=>{\n        _lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__.alertThresholdManager.startMonitoring();\n        setIsAlertMonitoring(true);\n        // Set up periodic alert history updates\n        const updateAlertHistory = ()=>{\n            setAlertHistory(_lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__.alertThresholdManager.getAlertHistory());\n        };\n        const interval = setInterval(updateAlertHistory, 5000) // Update every 5 seconds\n        ;\n        updateAlertHistory() // Initial update\n        ;\n        window.alertHistoryInterval = interval;\n    };\n    const stopAlertMonitoring = ()=>{\n        _lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__.alertThresholdManager.stopMonitoring();\n        setIsAlertMonitoring(false);\n        // Clear interval\n        if (window.alertHistoryInterval) {\n            clearInterval(window.alertHistoryInterval);\n        }\n    };\n    const updateThreshold = (name, updates)=>{\n        const success = _lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__.alertThresholdManager.updateThreshold(name, updates);\n        if (success) {\n            setAlertThresholds(_lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__.alertThresholdManager.getAllThresholds());\n        }\n        return success;\n    };\n    const addThreshold = (threshold)=>{\n        _lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__.alertThresholdManager.addThreshold(threshold);\n        setAlertThresholds(_lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__.alertThresholdManager.getAllThresholds());\n    };\n    const removeThreshold = (name)=>{\n        const success = _lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__.alertThresholdManager.removeThreshold(name);\n        if (success) {\n            setAlertThresholds(_lib_alert_thresholds__WEBPACK_IMPORTED_MODULE_4__.alertThresholdManager.getAllThresholds());\n        }\n        return success;\n    };\n    // Correlation ID functions\n    const generateCorrelationContext = (parentId, userId, tenantId, sessionId, metadata)=>{\n        _lib_correlation_id__WEBPACK_IMPORTED_MODULE_3__.correlationIDManager.generateContext(parentId, userId, tenantId, sessionId, metadata);\n    };\n    const getCorrelationHeaders = ()=>_lib_correlation_id__WEBPACK_IMPORTED_MODULE_3__.correlationIDManager.getHeaders();\n    // Get current correlation context\n    const currentContext = _lib_correlation_id__WEBPACK_IMPORTED_MODULE_3__.correlationIDManager.getCurrentContext();\n    // Context value\n    const contextValue = {\n        // Health monitoring\n        currentHealth,\n        healthHistory,\n        metricsHistory,\n        isMonitoring,\n        startMonitoring,\n        stopMonitoring,\n        runHealthCheck,\n        // Correlation ID tracking\n        correlationId: currentContext === null || currentContext === void 0 ? void 0 : currentContext.correlationId,\n        requestId: currentContext === null || currentContext === void 0 ? void 0 : currentContext.requestId,\n        spanId: currentContext === null || currentContext === void 0 ? void 0 : currentContext.spanId,\n        traceId: currentContext === null || currentContext === void 0 ? void 0 : currentContext.traceId,\n        generateCorrelationContext,\n        getCorrelationHeaders,\n        // Alert thresholds\n        alertThresholds,\n        alertHistory,\n        isAlertMonitoring,\n        startAlertMonitoring,\n        stopAlertMonitoring,\n        updateThreshold,\n        addThreshold,\n        removeThreshold,\n        // System status\n        systemStatus\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ObservabilityContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/macmini/Documents/Projects/SaaS Factory/ui/nextjs/src/components/providers/ObservabilityProvider.tsx\",\n        lineNumber: 273,\n        columnNumber: 5\n    }, this);\n}\n_s(ObservabilityProvider, \"JV24TfEYe5W8dFfUTNGuEEjxFAE=\");\n_c = ObservabilityProvider;\n// Hook to use observability context\nfunction useHealthMonitoring() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ObservabilityContext);\n    if (context === undefined) {\n        throw new Error('useHealthMonitoring must be used within an ObservabilityProvider');\n    }\n    return context;\n}\n_s1(useHealthMonitoring, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n// Hook to use correlation ID\nfunction useObservabilityCorrelationID() {\n    _s2();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ObservabilityContext);\n    if (context === undefined) {\n        throw new Error('useObservabilityCorrelationID must be used within an ObservabilityProvider');\n    }\n    return {\n        correlationId: context.correlationId,\n        requestId: context.requestId,\n        spanId: context.spanId,\n        traceId: context.traceId,\n        generateCorrelationContext: context.generateCorrelationContext,\n        getCorrelationHeaders: context.getCorrelationHeaders\n    };\n}\n_s2(useObservabilityCorrelationID, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n// Hook to use alert thresholds\nfunction useAlertThresholds() {\n    _s3();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ObservabilityContext);\n    if (context === undefined) {\n        throw new Error('useAlertThresholds must be used within an ObservabilityProvider');\n    }\n    return {\n        alertThresholds: context.alertThresholds,\n        alertHistory: context.alertHistory,\n        isAlertMonitoring: context.isAlertMonitoring,\n        startAlertMonitoring: context.startAlertMonitoring,\n        stopAlertMonitoring: context.stopAlertMonitoring,\n        updateThreshold: context.updateThreshold,\n        addThreshold: context.addThreshold,\n        removeThreshold: context.removeThreshold\n    };\n}\n_s3(useAlertThresholds, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n// Hook to use system status\nfunction useSystemStatus() {\n    _s4();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ObservabilityContext);\n    if (context === undefined) {\n        throw new Error('useSystemStatus must be used within an ObservabilityProvider');\n    }\n    return context.systemStatus;\n}\n_s4(useSystemStatus, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ObservabilityProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/providers/ObservabilityProvider.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/alert-thresholds.ts":
/*!*************************************!*\
  !*** ./src/lib/alert-thresholds.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlertThresholdManager: () => (/* binding */ AlertThresholdManager),\n/* harmony export */   alertThresholdManager: () => (/* binding */ alertThresholdManager)\n/* harmony export */ });\n/* harmony import */ var _correlation_id__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./correlation-id */ \"(app-pages-browser)/./src/lib/correlation-id.ts\");\n\n// Alert threshold manager\nclass AlertThresholdManager {\n    static getInstance() {\n        if (!AlertThresholdManager.instance) {\n            AlertThresholdManager.instance = new AlertThresholdManager();\n        }\n        return AlertThresholdManager.instance;\n    }\n    // Initialize default production thresholds\n    initializeDefaultThresholds() {\n        const defaultThresholds = [\n            // Performance thresholds\n            {\n                name: 'Error Rate Warning',\n                metric: 'error_rate',\n                warning: 2.0,\n                critical: 5.0,\n                enabled: true,\n                description: 'System error rate threshold',\n                category: 'performance',\n                severity: 'medium',\n                cooldown: 300,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        5.0,\n                        10.0,\n                        15.0\n                    ],\n                    contacts: [\n                        'dev-team',\n                        'oncall',\n                        'management'\n                    ]\n                }\n            },\n            {\n                name: 'Response Time Warning',\n                metric: 'response_time',\n                warning: 500,\n                critical: 2000,\n                enabled: true,\n                description: 'API response time threshold',\n                category: 'performance',\n                severity: 'medium',\n                cooldown: 300,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        2000,\n                        5000,\n                        10000\n                    ],\n                    contacts: [\n                        'dev-team',\n                        'oncall'\n                    ]\n                }\n            },\n            {\n                name: 'CPU Usage Warning',\n                metric: 'cpu_usage',\n                warning: 70.0,\n                critical: 85.0,\n                enabled: true,\n                description: 'CPU utilization threshold',\n                category: 'performance',\n                severity: 'high',\n                cooldown: 180,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        85.0,\n                        90.0,\n                        95.0\n                    ],\n                    contacts: [\n                        'ops-team',\n                        'oncall',\n                        'management'\n                    ]\n                }\n            },\n            {\n                name: 'Memory Usage Warning',\n                metric: 'memory_usage',\n                warning: 80.0,\n                critical: 90.0,\n                enabled: true,\n                description: 'Memory utilization threshold',\n                category: 'performance',\n                severity: 'high',\n                cooldown: 180,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        90.0,\n                        95.0,\n                        98.0\n                    ],\n                    contacts: [\n                        'ops-team',\n                        'oncall',\n                        'management'\n                    ]\n                }\n            },\n            {\n                name: 'Disk Usage Warning',\n                metric: 'disk_usage',\n                warning: 75.0,\n                critical: 85.0,\n                enabled: true,\n                description: 'Disk space utilization threshold',\n                category: 'performance',\n                severity: 'medium',\n                cooldown: 600,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        85.0,\n                        90.0,\n                        95.0\n                    ],\n                    contacts: [\n                        'ops-team',\n                        'oncall'\n                    ]\n                }\n            },\n            // Availability thresholds\n            {\n                name: 'Uptime Warning',\n                metric: 'uptime',\n                warning: 99.0,\n                critical: 95.0,\n                enabled: true,\n                description: 'System uptime threshold',\n                category: 'availability',\n                severity: 'critical',\n                cooldown: 60,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        95.0,\n                        90.0,\n                        80.0\n                    ],\n                    contacts: [\n                        'oncall',\n                        'management',\n                        'executive'\n                    ]\n                }\n            },\n            {\n                name: 'Health Check Failure',\n                metric: 'health_check_failure',\n                warning: 1,\n                critical: 3,\n                enabled: true,\n                description: 'Health check failure threshold',\n                category: 'availability',\n                severity: 'high',\n                cooldown: 120,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        3,\n                        5,\n                        10\n                    ],\n                    contacts: [\n                        'dev-team',\n                        'oncall',\n                        'management'\n                    ]\n                }\n            },\n            // Security thresholds\n            {\n                name: 'Failed Login Attempts',\n                metric: 'failed_logins',\n                warning: 10,\n                critical: 50,\n                enabled: true,\n                description: 'Failed authentication attempts threshold',\n                category: 'security',\n                severity: 'high',\n                cooldown: 300,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        50,\n                        100,\n                        200\n                    ],\n                    contacts: [\n                        'security-team',\n                        'oncall',\n                        'management'\n                    ]\n                }\n            },\n            {\n                name: 'API Rate Limit Exceeded',\n                metric: 'rate_limit_exceeded',\n                warning: 100,\n                critical: 1000,\n                enabled: true,\n                description: 'API rate limit violation threshold',\n                category: 'security',\n                severity: 'medium',\n                cooldown: 180,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        1000,\n                        5000,\n                        10000\n                    ],\n                    contacts: [\n                        'security-team',\n                        'dev-team'\n                    ]\n                }\n            },\n            // Business thresholds\n            {\n                name: 'Transaction Failure Rate',\n                metric: 'transaction_failure_rate',\n                warning: 1.0,\n                critical: 5.0,\n                enabled: true,\n                description: 'Business transaction failure threshold',\n                category: 'business',\n                severity: 'critical',\n                cooldown: 60,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        5.0,\n                        10.0,\n                        20.0\n                    ],\n                    contacts: [\n                        'business-team',\n                        'management',\n                        'executive'\n                    ]\n                }\n            },\n            {\n                name: 'Revenue Impact',\n                metric: 'revenue_impact',\n                warning: 1000,\n                critical: 10000,\n                enabled: true,\n                description: 'Revenue impact threshold',\n                category: 'business',\n                severity: 'critical',\n                cooldown: 300,\n                escalation: {\n                    enabled: true,\n                    levels: [\n                        10000,\n                        50000,\n                        100000\n                    ],\n                    contacts: [\n                        'business-team',\n                        'executive',\n                        'board'\n                    ]\n                }\n            }\n        ];\n        defaultThresholds.forEach((threshold)=>{\n            this.thresholds.set(threshold.name, threshold);\n        });\n    }\n    // Add or update a threshold\n    addThreshold(threshold) {\n        this.thresholds.set(threshold.name, threshold);\n        this.logThresholdChange('added', threshold);\n    }\n    // Remove a threshold\n    removeThreshold(name) {\n        const threshold = this.thresholds.get(name);\n        if (threshold) {\n            this.thresholds.delete(name);\n            this.logThresholdChange('removed', threshold);\n            return true;\n        }\n        return false;\n    }\n    // Get all thresholds\n    getAllThresholds() {\n        return Array.from(this.thresholds.values());\n    }\n    // Get threshold by name\n    getThreshold(name) {\n        return this.thresholds.get(name);\n    }\n    // Update threshold values\n    updateThreshold(name, updates) {\n        const threshold = this.thresholds.get(name);\n        if (threshold) {\n            const updatedThreshold = {\n                ...threshold,\n                ...updates\n            };\n            this.thresholds.set(name, updatedThreshold);\n            this.logThresholdChange('updated', updatedThreshold);\n            return true;\n        }\n        return false;\n    }\n    // Check if a metric value triggers an alert\n    checkThreshold(metric, value) {\n        const triggeredAlerts = [];\n        const now = Date.now();\n        for (const threshold of this.thresholds.values()){\n            if (!threshold.enabled || threshold.metric !== metric) continue;\n            // Check cooldown\n            if (threshold.lastTriggered && now - threshold.lastTriggered < threshold.cooldown * 1000) {\n                continue;\n            }\n            let status = null;\n            if (value >= threshold.critical) {\n                status = 'critical';\n            } else if (value >= threshold.warning) {\n                status = 'warning';\n            } else if (threshold.lastTriggered) {\n                // Check if we should resolve the alert\n                status = 'resolved';\n            }\n            if (status) {\n                var _correlationIDManager_getCurrentContext;\n                const alertEvent = {\n                    id: \"\".concat(threshold.name, \"_\").concat(now),\n                    threshold,\n                    value,\n                    status,\n                    timestamp: now,\n                    correlationId: (_correlationIDManager_getCurrentContext = _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.getCurrentContext()) === null || _correlationIDManager_getCurrentContext === void 0 ? void 0 : _correlationIDManager_getCurrentContext.correlationId,\n                    metadata: {\n                        metric,\n                        value,\n                        threshold: {\n                            warning: threshold.warning,\n                            critical: threshold.critical\n                        },\n                        category: threshold.category,\n                        severity: threshold.severity\n                    }\n                };\n                triggeredAlerts.push(alertEvent);\n                // Update last triggered time for warning/critical alerts\n                if (status !== 'resolved') {\n                    threshold.lastTriggered = now;\n                    this.thresholds.set(threshold.name, threshold);\n                }\n                // Log the alert\n                this.logAlert(alertEvent);\n            }\n        }\n        return triggeredAlerts;\n    }\n    // Start monitoring thresholds\n    startMonitoring() {\n        let intervalMs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 30000;\n        if (this.isMonitoring) return;\n        this.isMonitoring = true;\n        this.monitoringInterval = setInterval(()=>{\n            this.runThresholdChecks();\n        }, intervalMs);\n        console.log('Alert threshold monitoring started with interval:', intervalMs, 'ms');\n    }\n    // Stop monitoring thresholds\n    stopMonitoring() {\n        if (this.monitoringInterval) {\n            clearInterval(this.monitoringInterval);\n            this.monitoringInterval = null;\n        }\n        this.isMonitoring = false;\n        console.log('Alert threshold monitoring stopped');\n    }\n    // Run threshold checks (placeholder for actual metric collection)\n    async runThresholdChecks() {\n        // This would typically collect metrics from various sources\n        // For now, we'll just log that monitoring is active\n        const activeThresholds = this.getAllThresholds().filter((t)=>t.enabled);\n        if (activeThresholds.length > 0) {\n            console.log(\"Monitoring \".concat(activeThresholds.length, \" active thresholds\"));\n        }\n    }\n    // Get alert history\n    getAlertHistory() {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 100;\n        return this.alertHistory.slice(-limit);\n    }\n    // Clear alert history\n    clearAlertHistory() {\n        this.alertHistory = [];\n    }\n    // Get alerts by status\n    getAlertsByStatus(status) {\n        return this.alertHistory.filter((alert)=>alert.status === status);\n    }\n    // Get alerts by category\n    getAlertsByCategory(category) {\n        return this.alertHistory.filter((alert)=>alert.threshold.category === category);\n    }\n    // Get alerts by severity\n    getAlertsBySeverity(severity) {\n        return this.alertHistory.filter((alert)=>alert.threshold.severity === severity);\n    }\n    // Log threshold changes\n    logThresholdChange(action, threshold) {\n        const context = _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.getCurrentContext();\n        if (context) {\n            _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.logContext(context, 'info');\n        }\n        console.log(\"\\uD83D\\uDD14 Alert threshold \".concat(action, \":\"), {\n            name: threshold.name,\n            metric: threshold.metric,\n            warning: threshold.warning,\n            critical: threshold.critical,\n            category: threshold.category,\n            severity: threshold.severity,\n            correlationId: context === null || context === void 0 ? void 0 : context.correlationId\n        });\n    }\n    // Log alerts\n    logAlert(alert) {\n        // Add to history\n        this.alertHistory.push(alert);\n        if (this.alertHistory.length > 1000) {\n            this.alertHistory = this.alertHistory.slice(-1000);\n        }\n        // Log the alert\n        const emoji = alert.status === 'critical' ? '🚨' : alert.status === 'warning' ? '⚠️' : '✅';\n        console.log(\"\".concat(emoji, \" Alert triggered:\"), {\n            name: alert.threshold.name,\n            status: alert.status,\n            value: alert.value,\n            threshold: alert.threshold,\n            timestamp: new Date(alert.timestamp).toISOString(),\n            correlationId: alert.correlationId\n        });\n        // TODO: Send alerts to external systems (Slack, PagerDuty, etc.)\n        this.sendExternalAlert(alert);\n    }\n    // Send external alert (placeholder)\n    async sendExternalAlert(alert) {\n        // This would integrate with external alerting systems\n        // For now, we'll just log that we would send it\n        console.log(\"\\uD83D\\uDCE4 Would send external alert for: \".concat(alert.threshold.name));\n    }\n    // Get monitoring status\n    getMonitoringStatus() {\n        return {\n            isActive: this.isMonitoring,\n            interval: this.monitoringInterval ? 30000 : null,\n            thresholdCount: this.thresholds.size\n        };\n    }\n    // Export thresholds to JSON\n    exportThresholds() {\n        return JSON.stringify(Array.from(this.thresholds.values()), null, 2);\n    }\n    // Import thresholds from JSON\n    importThresholds(jsonData) {\n        try {\n            const thresholds = JSON.parse(jsonData);\n            this.thresholds.clear();\n            thresholds.forEach((threshold)=>{\n                this.thresholds.set(threshold.name, threshold);\n            });\n            console.log(\"Imported \".concat(thresholds.length, \" thresholds\"));\n            return true;\n        } catch (error) {\n            console.error('Failed to import thresholds:', error);\n            return false;\n        }\n    }\n    constructor(){\n        this.thresholds = new Map();\n        this.alertHistory = [];\n        this.isMonitoring = false;\n        this.monitoringInterval = null;\n        this.initializeDefaultThresholds();\n    }\n}\n// Export singleton instance\nconst alertThresholdManager = AlertThresholdManager.getInstance();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/alert-thresholds.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/correlation-id.ts":
/*!***********************************!*\
  !*** ./src/lib/correlation-id.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCorrelationId: () => (/* binding */ addCorrelationId),\n/* harmony export */   correlationAwareFetch: () => (/* binding */ correlationAwareFetch),\n/* harmony export */   correlationManager: () => (/* binding */ correlationManager),\n/* harmony export */   createCorrelationAwareFetch: () => (/* binding */ createCorrelationAwareFetch),\n/* harmony export */   createCorrelationContext: () => (/* binding */ createCorrelationContext),\n/* harmony export */   createFetchOptionsWithCorrelation: () => (/* binding */ createFetchOptionsWithCorrelation),\n/* harmony export */   createHeadersWithCorrelation: () => (/* binding */ createHeadersWithCorrelation),\n/* harmony export */   extractCorrelationId: () => (/* binding */ extractCorrelationId),\n/* harmony export */   generateCorrelationId: () => (/* binding */ generateCorrelationId),\n/* harmony export */   generateSpanId: () => (/* binding */ generateSpanId),\n/* harmony export */   generateTraceId: () => (/* binding */ generateTraceId),\n/* harmony export */   logWithCorrelation: () => (/* binding */ logWithCorrelation),\n/* harmony export */   withCorrelationContext: () => (/* binding */ withCorrelationContext)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// Correlation ID service for request tracing and observability\n// Configuration\nconst CORRELATION_ID_HEADER = process.env.NEXT_PUBLIC_CORRELATION_ID_HEADER || 'X-Correlation-ID';\nconst CORRELATION_ID_LENGTH = parseInt(process.env.NEXT_PUBLIC_CORRELATION_ID_LENGTH || '16', 10);\n// Generate a unique correlation ID\nfunction generateCorrelationId() {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for(let i = 0; i < CORRELATION_ID_LENGTH; i++){\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n}\n// Generate a trace ID (longer, more unique identifier)\nfunction generateTraceId() {\n    return generateCorrelationId() + generateCorrelationId();\n}\n// Generate a span ID (shorter identifier for individual operations)\nfunction generateSpanId() {\n    return generateCorrelationId().substring(0, 8);\n}\n// Create a new correlation context\nfunction createCorrelationContext(parentContext) {\n    let metadata = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const now = new Date().toISOString();\n    return {\n        id: (parentContext === null || parentContext === void 0 ? void 0 : parentContext.id) || generateCorrelationId(),\n        parentId: parentContext === null || parentContext === void 0 ? void 0 : parentContext.parentId,\n        traceId: (parentContext === null || parentContext === void 0 ? void 0 : parentContext.traceId) || generateTraceId(),\n        spanId: generateSpanId(),\n        userId: parentContext === null || parentContext === void 0 ? void 0 : parentContext.userId,\n        sessionId: parentContext === null || parentContext === void 0 ? void 0 : parentContext.sessionId,\n        requestId: (parentContext === null || parentContext === void 0 ? void 0 : parentContext.requestId) || generateCorrelationId(),\n        timestamp: now,\n        metadata: {\n            ...parentContext === null || parentContext === void 0 ? void 0 : parentContext.metadata,\n            ...metadata,\n            created_at: now\n        }\n    };\n}\n// Extract correlation ID from headers\nfunction extractCorrelationId(headers) {\n    if (headers instanceof Headers) {\n        return headers.get(CORRELATION_ID_HEADER) || null;\n    }\n    return headers[CORRELATION_ID_HEADER] || null;\n}\n// Add correlation ID to headers\nfunction addCorrelationId(headers, correlationId) {\n    if (headers instanceof Headers) {\n        headers.set(CORRELATION_ID_HEADER, correlationId);\n    } else {\n        headers[CORRELATION_ID_HEADER] = correlationId;\n    }\n}\n// Create headers with correlation ID\nfunction createHeadersWithCorrelation(correlationId) {\n    let additionalHeaders = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    return {\n        [CORRELATION_ID_HEADER]: correlationId,\n        'Content-Type': 'application/json',\n        ...additionalHeaders\n    };\n}\n// Create fetch options with correlation ID\nfunction createFetchOptionsWithCorrelation(correlationId) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    return {\n        ...options,\n        headers: {\n            ...createHeadersWithCorrelation(correlationId),\n            ...options.headers\n        }\n    };\n}\n// Correlation context manager for React components\nclass CorrelationContextManager {\n    // Set the current correlation context\n    setContext(context) {\n        this.currentContext = context;\n        this.notifyListeners();\n    }\n    // Get the current correlation context\n    getContext() {\n        return this.currentContext;\n    }\n    // Create a child context\n    createChildContext() {\n        let metadata = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        if (!this.currentContext) {\n            return createCorrelationContext({}, metadata);\n        }\n        return createCorrelationContext(this.currentContext, {\n            ...metadata,\n            parent_correlation_id: this.currentContext.id\n        });\n    }\n    // Update the current context with additional metadata\n    updateContext(metadata) {\n        if (this.currentContext) {\n            this.currentContext.metadata = {\n                ...this.currentContext.metadata,\n                ...metadata,\n                updated_at: new Date().toISOString()\n            };\n            this.notifyListeners();\n        }\n    }\n    // Clear the current context\n    clearContext() {\n        this.currentContext = null;\n        this.notifyListeners();\n    }\n    // Subscribe to context changes\n    subscribe(listener) {\n        this.listeners.add(listener);\n        return ()=>{\n            this.listeners.delete(listener);\n        };\n    }\n    // Notify all listeners of context changes\n    notifyListeners() {\n        this.listeners.forEach((listener)=>{\n            try {\n                listener(this.currentContext);\n            } catch (error) {\n                console.error('Error in correlation context listener:', error);\n            }\n        });\n    }\n    // Extract correlation ID from headers\n    extractFromHeaders(headers) {\n        const correlationId = headers['x-correlation-id'] || headers['X-Correlation-ID'];\n        if (!correlationId) return null;\n        const context = this.getContext(correlationId);\n        if (context) {\n            this.setCurrentContext(context);\n            return context;\n        }\n        // Create new context from headers, preserving the incoming correlation ID\n        const newContext = {\n            correlationId: correlationId,\n            requestId: headers['x-request-id'] || headers['X-Request-ID'] || uuidv4(),\n            parentId: headers['x-parent-id'] || headers['X-Parent-ID'] || undefined,\n            spanId: headers['x-span-id'] || headers['X-Span-ID'] || uuidv4(),\n            traceId: headers['x-trace-id'] || headers['X-Trace-ID'] || correlationId,\n            userId: headers['x-user-id'] || headers['X-User-ID'] || undefined,\n            tenantId: headers['x-tenant-id'] || headers['X-Tenant-ID'] || undefined,\n            sessionId: headers['x-session-id'] || headers['X-Session-ID'] || undefined,\n            timestamp: parseInt(headers['x-timestamp'] || headers['X-Timestamp'] || Date.now().toString()),\n            metadata: {\n                service: headers['x-service'] || headers['X-Service'] || 'unknown',\n                version: process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0',\n                environment: \"development\" || 0\n            }\n        };\n        this.setCurrentContext(newContext);\n        return newContext;\n    }\n    constructor(){\n        this.currentContext = null;\n        this.listeners = new Set();\n    }\n}\n// Export singleton instance\nconst correlationManager = new CorrelationContextManager();\n// Utility function to log with correlation context\nfunction logWithCorrelation(level, message, data) {\n    const context = correlationManager.getContext();\n    const logData = {\n        message,\n        data,\n        correlation_id: context === null || context === void 0 ? void 0 : context.id,\n        trace_id: context === null || context === void 0 ? void 0 : context.traceId,\n        span_id: context === null || context === void 0 ? void 0 : context.spanId,\n        timestamp: new Date().toISOString()\n    };\n    switch(level){\n        case 'info':\n            console.info('📊', logData);\n            break;\n        case 'warn':\n            console.warn('⚠️', logData);\n            break;\n        case 'error':\n            console.error('❌', logData);\n            break;\n        case 'debug':\n            console.debug('🔍', logData);\n            break;\n    }\n}\n// Utility function to create a correlation-aware fetch wrapper\nfunction createCorrelationAwareFetch() {\n    return async (input, init)=>{\n        const context = correlationManager.getContext();\n        if (context) {\n            const options = createFetchOptionsWithCorrelation(context.id, init);\n            // Log the request\n            logWithCorrelation('info', 'API Request', {\n                url: typeof input === 'string' ? input : input.toString(),\n                method: options.method || 'GET',\n                correlation_id: context.id\n            });\n            try {\n                const response = await fetch(input, options);\n                // Log the response\n                logWithCorrelation('info', 'API Response', {\n                    url: typeof input === 'string' ? input : input.toString(),\n                    status: response.status,\n                    statusText: response.statusText,\n                    correlation_id: context.id\n                });\n                return response;\n            } catch (error) {\n                // Log the error\n                logWithCorrelation('error', 'API Request Failed', {\n                    url: typeof input === 'string' ? input : input.toString(),\n                    error: error instanceof Error ? error.message : String(error),\n                    correlation_id: context.id\n                });\n                throw error;\n            }\n        }\n        // Fallback to regular fetch if no correlation context\n        return fetch(input, init);\n    };\n}\n// Export the correlation-aware fetch function\nconst correlationAwareFetch = createCorrelationAwareFetch();\n// Utility function to wrap async operations with correlation context\nfunction withCorrelationContext(operation) {\n    let metadata = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const childContext = correlationManager.createChildContext(metadata);\n    correlationManager.setContext(childContext);\n    return operation().finally(()=>{\n        // Restore parent context if it exists\n        if (childContext.parentId) {\n            const parentContext = correlationManager.getContext();\n            if (parentContext && parentContext.id === childContext.parentId) {\n                correlationManager.setContext(parentContext);\n            }\n        }\n    });\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/correlation-id.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/health-monitoring-simple.ts":
/*!*********************************************!*\
  !*** ./src/lib/health-monitoring-simple.ts ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   healthMonitoring: () => (/* binding */ healthMonitoring)\n/* harmony export */ });\n/* harmony import */ var _correlation_id__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./correlation-id */ \"(app-pages-browser)/./src/lib/correlation-id.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n// Default health check configurations\nconst DEFAULT_HEALTH_CHECKS = [\n    {\n        name: 'system',\n        endpoint: 'internal',\n        timeout: 5000,\n        critical: false,\n        retries: 2\n    },\n    {\n        name: 'frontend',\n        endpoint: '/api/health',\n        timeout: 5000,\n        expectedStatus: 200,\n        critical: true,\n        retries: 3\n    },\n    {\n        name: 'backend-api',\n        endpoint: process.env.NEXT_PUBLIC_HEALTH_API_URL || 'http://localhost:8000/health',\n        timeout: 5000,\n        expectedStatus: 200,\n        critical: true,\n        retries: 3\n    }\n];\n// Health monitoring service\nclass HealthMonitoringService {\n    // Run a single health check\n    async runHealthCheck(config) {\n        var _correlationIDManager_getCurrentContext;\n        const startTime = Date.now();\n        const correlationId = (_correlationIDManager_getCurrentContext = _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.getCurrentContext()) === null || _correlationIDManager_getCurrentContext === void 0 ? void 0 : _correlationIDManager_getCurrentContext.correlationId;\n        try {\n            let result;\n            if (config.endpoint === 'internal') {\n                // Internal system check\n                result = await this.runInternalHealthCheck(config);\n            } else {\n                // External endpoint check\n                result = await this.runExternalHealthCheck(config);\n            }\n            // Add correlation ID to result\n            if (correlationId) {\n                result.correlationId = correlationId;\n            }\n            return result;\n        } catch (error) {\n            const responseTime = Date.now() - startTime;\n            return {\n                status: 'fail',\n                responseTime,\n                error: error instanceof Error ? error.message : String(error),\n                timestamp: new Date().toISOString(),\n                correlationId\n            };\n        }\n    }\n    // Run internal health check\n    async runInternalHealthCheck(config) {\n        const startTime = Date.now();\n        try {\n            // Check system resources\n            const systemInfo = await this.getSystemInfo();\n            const responseTime = Date.now() - startTime;\n            return {\n                status: 'pass',\n                responseTime,\n                details: systemInfo,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            const responseTime = Date.now() - startTime;\n            return {\n                status: 'fail',\n                responseTime,\n                error: error instanceof Error ? error.message : String(error),\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    // Run external health check\n    async runExternalHealthCheck(config) {\n        const startTime = Date.now();\n        let lastError = null;\n        // Try with retries\n        for(let attempt = 1; attempt <= config.retries; attempt++){\n            try {\n                const headers = {\n                    ...(0,_correlation_id__WEBPACK_IMPORTED_MODULE_0__.getCorrelationHeaders)(),\n                    ...config.headers,\n                    'User-Agent': 'Health-Monitor/1.0'\n                };\n                const controller = new AbortController();\n                const timeoutId = setTimeout(()=>controller.abort(), config.timeout);\n                const response = await fetch(config.endpoint, {\n                    method: 'HEAD',\n                    headers,\n                    signal: controller.signal\n                });\n                clearTimeout(timeoutId);\n                const responseTime = Date.now() - startTime;\n                if (config.expectedStatus && response.status !== config.expectedStatus) {\n                    throw new Error(\"Expected status \".concat(config.expectedStatus, \", got \").concat(response.status));\n                }\n                return {\n                    status: response.status < 400 ? 'pass' : response.status < 500 ? 'warn' : 'fail',\n                    responseTime,\n                    details: {\n                        status: response.status,\n                        statusText: response.statusText,\n                        headers: Object.fromEntries(response.headers.entries())\n                    },\n                    timestamp: new Date().toISOString()\n                };\n            } catch (error) {\n                lastError = error instanceof Error ? error : new Error(String(error));\n                // If this is the last attempt, throw the error\n                if (attempt === config.retries) {\n                    break;\n                }\n                // Wait before retry (exponential backoff)\n                await new Promise((resolve)=>setTimeout(resolve, Math.pow(2, attempt) * 100));\n            }\n        }\n        const responseTime = Date.now() - startTime;\n        throw lastError || new Error('Health check failed after all retries');\n    }\n    // Get system information\n    async getSystemInfo() {\n        if (false) {}\n        // Client-side\n        return {\n            platform: 'browser',\n            userAgent: navigator.userAgent,\n            language: navigator.language,\n            cookieEnabled: navigator.cookieEnabled,\n            onLine: navigator.onLine,\n            timestamp: new Date().toISOString()\n        };\n    }\n    // Run comprehensive health check\n    async runComprehensiveHealthCheck() {\n        var _correlationIDManager_getCurrentContext;\n        const startTime = Date.now();\n        const correlationId = (_correlationIDManager_getCurrentContext = _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.getCurrentContext()) === null || _correlationIDManager_getCurrentContext === void 0 ? void 0 : _correlationIDManager_getCurrentContext.correlationId;\n        // Generate correlation context for this health check\n        const healthCheckContext = _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.generateContext(correlationId, undefined, undefined, undefined, {\n            operation: 'health_check',\n            type: 'comprehensive'\n        });\n        try {\n            const checkResults = {};\n            const checkPromises = DEFAULT_HEALTH_CHECKS.map(async (config)=>{\n                const result = await this.runHealthCheck(config);\n                checkResults[config.name] = result;\n                return result;\n            });\n            await Promise.allSettled(checkPromises);\n            // Calculate summary\n            const summary = this.calculateHealthSummary(checkResults);\n            // Determine overall status\n            let status = 'healthy';\n            if (summary.failedChecks > 0) {\n                status = 'unhealthy';\n            } else if (summary.warningChecks > 0 || summary.overallHealth < 90) {\n                status = 'degraded';\n            }\n            const result = {\n                status,\n                timestamp: new Date().toISOString(),\n                checks: checkResults,\n                summary,\n                metadata: {\n                    service: 'AI SaaS Factory - Next.js Frontend',\n                    region: 'local',\n                    instance: 'localhost',\n                    build: 'local',\n                    commit: 'local',\n                    correlationId: healthCheckContext.correlationId\n                }\n            };\n            // Add to history\n            this.healthHistory.push(result);\n            if (this.healthHistory.length > 100) {\n                this.healthHistory = this.healthHistory.slice(-100);\n            }\n            // Update metrics\n            this.updateMetrics(result);\n            // Log correlation context\n            _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.logContext(healthCheckContext, 'info');\n            return result;\n        } catch (error) {\n            const responseTime = Date.now() - startTime;\n            // Create error result\n            const errorResult = {\n                status: 'unhealthy',\n                timestamp: new Date().toISOString(),\n                checks: {},\n                summary: {\n                    overallHealth: 0,\n                    totalChecks: 0,\n                    passedChecks: 0,\n                    failedChecks: 1,\n                    warningChecks: 0,\n                    averageResponseTime: responseTime\n                },\n                metadata: {\n                    service: 'AI SaaS Factory - Next.js Frontend',\n                    region: 'local',\n                    instance: 'localhost',\n                    build: 'local',\n                    commit: 'local',\n                    correlationId: healthCheckContext.correlationId\n                }\n            };\n            // Log error with correlation context\n            _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.logContext(healthCheckContext, 'error');\n            return errorResult;\n        } finally{\n            // Clear the health check context\n            _correlation_id__WEBPACK_IMPORTED_MODULE_0__.correlationIDManager.clearCurrentContext();\n        }\n    }\n    // Calculate health summary\n    calculateHealthSummary(checks) {\n        const checkArray = Object.values(checks);\n        const totalChecks = checkArray.length;\n        const passedChecks = checkArray.filter((c)=>c.status === 'pass').length;\n        const failedChecks = checkArray.filter((c)=>c.status === 'fail').length;\n        const warningChecks = checkArray.filter((c)=>c.status === 'warn').length;\n        const overallHealth = totalChecks > 0 ? passedChecks / totalChecks * 100 : 0;\n        const averageResponseTime = checkArray.length > 0 ? checkArray.reduce((sum, c)=>sum + c.responseTime, 0) / checkArray.length : 0;\n        return {\n            overallHealth: Math.round(overallHealth),\n            totalChecks,\n            passedChecks,\n            failedChecks,\n            warningChecks,\n            averageResponseTime: Math.round(averageResponseTime)\n        };\n    }\n    // Update metrics history\n    updateMetrics(healthResult) {\n        const metrics = {\n            overallScore: healthResult.summary.overallHealth,\n            errorRate: healthResult.summary.failedChecks / healthResult.summary.totalChecks,\n            responseTime: healthResult.summary.averageResponseTime,\n            uptime: healthResult.status === 'healthy' ? 100 : healthResult.status === 'degraded' ? 75 : 0,\n            lastCheck: healthResult.timestamp\n        };\n        this.metricsHistory.push(metrics);\n        if (this.metricsHistory.length > 1000) {\n            this.metricsHistory = this.metricsHistory.slice(-1000);\n        }\n    }\n    // Start monitoring\n    startMonitoring() {\n        let intervalMs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 30000;\n        if (this.isMonitoring) return;\n        this.isMonitoring = true;\n        this.monitoringInterval = setInterval(async ()=>{\n            try {\n                await this.runComprehensiveHealthCheck();\n            } catch (error) {\n                console.error('Health monitoring error:', error);\n            }\n        }, intervalMs);\n        console.log('Health monitoring started with interval:', intervalMs, 'ms');\n    }\n    // Stop monitoring\n    stopMonitoring() {\n        if (this.monitoringInterval) {\n            clearInterval(this.monitoringInterval);\n            this.monitoringInterval = null;\n        }\n        this.isMonitoring = false;\n        console.log('Health monitoring stopped');\n    }\n    // Get current health\n    getCurrentHealth() {\n        return this.healthHistory.length > 0 ? this.healthHistory[this.healthHistory.length - 1] : null;\n    }\n    // Get health history\n    getHealthHistory() {\n        return [\n            ...this.healthHistory\n        ];\n    }\n    // Get metrics history\n    getMetricsHistory() {\n        return [\n            ...this.metricsHistory\n        ];\n    }\n    // Check if monitoring is active\n    isMonitoringActive() {\n        return this.isMonitoring;\n    }\n    // Get monitoring status\n    getMonitoringStatus() {\n        return {\n            isActive: this.isMonitoring,\n            interval: this.monitoringInterval ? 30000 : null\n        };\n    }\n    constructor(){\n        this.healthHistory = [];\n        this.metricsHistory = [];\n        this.isMonitoring = false;\n        this.monitoringInterval = null;\n    }\n}\n// Export singleton instance\nconst healthMonitoring = new HealthMonitoringService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/health-monitoring-simple.ts\n"));

/***/ })

});