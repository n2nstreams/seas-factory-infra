name: Smoke Tests - Critical Path

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Run daily at 2 AM UTC to catch issues early
  schedule:
    - cron: '0 2 * * *'
  # Allow manual trigger
  workflow_dispatch:

jobs:
  marketplace-signup-smoke:
    runs-on: ubuntu-latest
    name: Marketplace Signup Smoke Tests
    timeout-minutes: 15
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_DB: factorydb
          POSTGRES_USER: factoryadmin
          POSTGRES_PASSWORD: localpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-smoke-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-smoke-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install core dependencies for smoke tests
          pip install pytest pytest-asyncio pytest-mock httpx
          pip install fastapi uvicorn pydantic==2.10.5 pydantic-settings==2.7.0 sqlalchemy asyncpg
          pip install bcrypt python-dotenv
          
          # Install project dependencies if they exist
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f api-gateway/requirements.txt ]; then pip install -r api-gateway/requirements.txt; fi
          
      - name: Set up database schema
        run: |
          # Wait for postgres to be ready
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for postgres..."
            sleep 2
          done
          
          # Apply database migrations for smoke tests
          if [ -d "dev/migrations" ]; then
            echo "Applying database migrations..."
            for migration in dev/migrations/*.sql; do
              if [ -f "$migration" ]; then
                echo "Applying $(basename $migration)..."
                PGPASSWORD=localpass psql -h localhost -U factoryadmin -d factorydb -f "$migration" || echo "Migration $(basename $migration) skipped (may already be applied)"
              fi
            done
          fi
          
      - name: Run marketplace signup smoke tests
        run: |
          echo "üöÄ Running marketplace signup smoke tests..."
          
          # Set PYTHONPATH to include the tests directory
          export PYTHONPATH="${PYTHONPATH}:$(pwd):$(pwd)/tests"
          
          # Run the simplified smoke test that doesn't require complex imports
          python tests/integration/test_marketplace_signup_smoke_simple.py
            
        env:
          DATABASE_URL: postgresql://factoryadmin:localpass@localhost:5432/factorydb
          DB_HOST: localhost
          DB_USER: factoryadmin
          DB_PASS: localpass
          DB_NAME: factorydb
          DB_PORT: 5432
          ENVIRONMENT: test
          DEBUG: true
          # Mock external services for smoke tests
          MOCK_EMAIL_SERVICE: true
          MOCK_STRIPE_SERVICE: true
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results
          path: |
            pytest.log
            test-reports/
          retention-days: 7
          
      - name: Report test status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ All smoke tests passed! Marketplace signup flow is healthy."
          else
            echo "‚ùå Smoke tests failed! Critical marketplace functionality may be broken."
            echo "üîç Check the test results for details on what failed."
          fi

  # Quick API health check
  api-health-check:
    runs-on: ubuntu-latest
    name: API Health Check
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install minimal dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fastapi uvicorn httpx pytest
          pip install asyncpg bcrypt pydantic==2.10.5 pydantic-settings==2.7.0 sqlalchemy python-dotenv
          pip install google-cloud-bigquery==3.28.0
          
      - name: Quick API structure validation
        run: |
          echo "üîç Validating API structure..."
          
          # Check that API gateway directory exists
          if [ ! -d "api-gateway" ]; then
            echo "‚ùå api-gateway directory not found!"
            exit 1
          fi
          
          # Check for critical route files
          echo "Checking for API route files..."
          for file in user_routes.py admin_routes.py factory_routes.py ideas_routes.py; do
            if [ -f "api-gateway/$file" ]; then
              echo "‚úÖ Found route file: $file"
            else
              echo "‚ùå Missing route file: $file"
              exit 1
            fi
          done
          
          # Check for critical endpoints in user_routes.py
          echo ""
          echo "Checking for critical endpoints in user_routes.py..."
          if grep -q '"/register"' api-gateway/user_routes.py; then
            echo "‚úÖ Found endpoint: /register"
          else
            echo "‚ùå Missing endpoint: /register"
            exit 1
          fi
          
          if grep -q '"/login"' api-gateway/user_routes.py; then
            echo "‚úÖ Found endpoint: /login"
          else
            echo "‚ùå Missing endpoint: /login"
            exit 1
          fi
          
          if grep -q '"/profile"' api-gateway/user_routes.py; then
            echo "‚úÖ Found endpoint: /profile"
          else
            echo "‚ùå Missing endpoint: /profile"
            exit 1
          fi
          
          echo "üéâ All critical API endpoints are present"
          
      - name: Validate frontend signup form
        run: |
          echo "üîç Validating frontend signup form..."
          
          # Check that signup form exists and has required fields
          if [ -f "ui/src/pages/Signup.tsx" ]; then
            echo "‚úÖ Signup page exists"
            
            # Check for critical form fields
            required_fields=("firstName" "lastName" "email" "password" "confirmPassword" "agreeToTerms")
            
            for field in "${required_fields[@]}"; do
              if grep -q "$field" ui/src/pages/Signup.tsx; then
                echo "‚úÖ Found required field: $field"
              else
                echo "‚ùå Missing required field: $field"
                exit 1
              fi
            done
            
            echo "üéâ All required form fields are present"
          else
            echo "‚ùå Signup page not found!"
            exit 1
          fi

  # Report overall smoke test status
  smoke-test-summary:
    runs-on: ubuntu-latest
    needs: [marketplace-signup-smoke, api-health-check]
    if: always()
    
    steps:
      - name: Report overall status
        run: |
          SIGNUP_STATUS="${{ needs.marketplace-signup-smoke.result }}"
          API_STATUS="${{ needs.api-health-check.result }}"
          
          echo "üìä Smoke Test Summary:"
          echo "  Marketplace Signup: $SIGNUP_STATUS"
          echo "  API Health Check: $API_STATUS"
          
          if [ "$SIGNUP_STATUS" == "success" ] && [ "$API_STATUS" == "success" ]; then
            echo "‚úÖ All smoke tests passed! System is ready for deployment."
            exit 0
          else
            echo "‚ùå Some smoke tests failed! Review before deploying."
            exit 1
          fi 