name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write      # Required for OIDC
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}
      
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev
      
      - name: Test authentication
        run: |
          # Test basic authentication
          gcloud auth list
          
          # Test Cloud Run access
          echo "Testing Cloud Run access..."
          gcloud run services list --region=us-central1 --limit=5 || {
            echo "‚ùå Cloud Run access failed"
            exit 1
          }
          
          # Test Artifact Registry access
          echo "Testing Artifact Registry access..."
          gcloud artifacts repositories list --limit=5 || {
            echo "‚ùå Artifact Registry access failed"
            exit 1
          }
          
          # Test project info
          echo "Project info:"
          gcloud config get-value project
          
          echo "‚úÖ GitHub OIDC authentication working!"
      
      - name: Build and push UI image
        run: |
          cd ui
          echo "Building UI Docker image..."
          docker build -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/saas-factory-web/ui:${{ github.sha }} . || {
            echo "‚ùå UI Docker build failed"
            exit 1
          }
          docker build -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/saas-factory-web/ui:latest .
          
          echo "Pushing UI Docker images..."
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/saas-factory-web/ui:${{ github.sha }} || {
            echo "‚ùå UI Docker push failed"
            exit 1
          }
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/saas-factory-web/ui:latest
          
          echo "‚úÖ UI Docker images built and pushed successfully"
      
      - name: Deploy UI to Cloud Run
        run: |
          echo "Deploying UI to Cloud Run..."
          gcloud run deploy web-frontend \
            --image=us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/saas-factory-web/ui:${{ github.sha }} \
            --region=us-central1 \
            --platform=managed \
            --allow-unauthenticated \
            --port=80 \
            --cpu=1 \
            --memory=512Mi \
            --max-instances=5 \
            --min-instances=0 || {
            echo "‚ùå UI deployment failed"
            exit 1
          }
          
          echo "üöÄ UI deployed successfully!"
          echo "Frontend URL: $(gcloud run services describe web-frontend --region=us-central1 --format='value(status.url)')"
          
      - name: Health check deployment
        run: |
          echo "Performing health check on deployed service..."
          SERVICE_URL=$(gcloud run services describe web-frontend --region=us-central1 --format='value(status.url)')
          
          # Wait for service to be ready
          for i in {1..30}; do
            if curl -f -s "$SERVICE_URL" > /dev/null; then
              echo "‚úÖ Service is responding to health checks"
              break
            fi
            echo "Waiting for service to be ready... (attempt $i/30)"
            sleep 10
          done
          
          if [ $i -eq 30 ]; then
            echo "‚ùå Service health check failed after 30 attempts"
            exit 1
          fi 