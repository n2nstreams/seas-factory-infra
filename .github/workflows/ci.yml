name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_DB: factorydb
          POSTGRES_USER: factoryadmin
          POSTGRES_PASSWORD: localpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install common development dependencies
          pip install black ruff pytest pytest-cov
          # Install project dependencies if they exist
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f agents/dev/starter-api/requirements.txt ]; then pip install -r agents/dev/starter-api/requirements.txt; fi
          
      - name: Create pgvector extension
        run: |
          PGPASSWORD=localpass psql -h localhost -U factoryadmin -d factorydb -c "CREATE EXTENSION IF NOT EXISTS vector;"
          
      - name: Lint with ruff
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          ruff check --select=E9,F63,F7,F82 --show-source --statistics .
          # Exit-zero treats all errors as warnings
          ruff check --exit-zero --statistics .
          
      - name: Format check with black
        run: |
          black --check --diff .
          
      - name: Run tests
        run: |
          # Run tests if test files exist
          if find . -name "*test*.py" -o -name "test_*.py" | grep -q .; then
            pytest --cov=. --cov-report=xml --cov-report=term-missing
          else
            echo "No test files found, skipping tests"
          fi
        env:
          DATABASE_URL: postgresql://factoryadmin:localpass@localhost:5432/factorydb
          
      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false 