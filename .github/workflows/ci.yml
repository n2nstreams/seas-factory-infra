name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test with Gemini (Default)
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_DB: factorydb
          POSTGRES_USER: factoryadmin
          POSTGRES_PASSWORD: localpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v5
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install minimal dependencies
        run: |
          python -m pip install --upgrade pip
          # Install only essential dependencies for CI
          pip install pytest pytest-cov black ruff
          
      - name: Create pgvector extension
        run: |
          PGPASSWORD=localpass psql -h localhost -U factoryadmin -d factorydb -c "CREATE EXTENSION IF NOT EXISTS vector;"
          
      - name: Lint with ruff
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          ruff check --select=E9,F63,F7,F82 --statistics . || {
            echo "❌ Critical Python syntax errors found"
            exit 1
          }
          # Exit-zero treats all errors as warnings
          ruff check --exit-zero --statistics .
          
      - name: Format check with black
        run: |
          black --check --diff . || {
            echo "❌ Code formatting issues found. Run: black ."
            exit 1
          }
          
      - name: Run tests
        run: |
          # Check for test files in project directories only (exclude venv and third-party)
          TEST_FILES=$(find . -name "*test*.py" -o -name "test_*.py" 2>/dev/null | grep -v -E "(\.venv|venv|env|y/google-cloud-sdk|orchestrator/\.venv)" | head -1)
          if [ -n "$TEST_FILES" ]; then
            echo "Test files found, running pytest..."
            
            # Run basic tests without complex dependencies
            pytest --tb=short -v --durations=10 || {
              echo "❌ Tests failed"
              exit 1
            }
              
          else
            echo "No test files found in project directories, skipping tests"
            echo "This is expected for projects without tests yet."
            # Create a dummy coverage.xml file to satisfy later steps
            mkdir -p .
            echo '<?xml version="1.0" ?><coverage version="7.0.0"><sources></sources><packages></packages></coverage>' > ./coverage.xml
          fi
        env:
          DATABASE_URL: postgresql://factoryadmin:localpass@localhost:5432/factorydb
          DB_HOST: localhost
          DB_USER: factoryadmin
          DB_PASS: localpass
          DB_NAME: factorydb
          DB_PORT: 5432
          # Enable smoke test mode
          SMOKE_TEST_MODE: true
          MOCK_EMAIL_SERVICE: true
          
      - name: Upload coverage to Codecov
        if: success() && hashFiles('./coverage.xml') != ''
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          fail_ci_if_error: false 